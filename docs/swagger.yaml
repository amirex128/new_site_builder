definitions:
  address.AdminGetAllAddressQuery:
    properties:
      page:
        minimum: 1
        type: integer
      pageSize:
        maximum: 100
        minimum: 1
        type: integer
      search:
        type: string
      searchBy:
        enum:
        - title
        - description
        type: string
      sort:
        enum:
        - asc
        - desc
        type: string
      sortBy:
        enum:
        - title
        - description
        type: string
    required:
    - page
    - pageSize
    type: object
  address.CreateAddressCommand:
    properties:
      addressLine:
        type: string
      cityId:
        type: integer
      customerId:
        type: integer
      latitude:
        maximum: 90
        minimum: -90
        type: number
      longitude:
        maximum: 180
        minimum: -180
        type: number
      postalCode:
        type: string
      provinceId:
        type: integer
      title:
        type: string
      userId:
        type: integer
    required:
    - cityId
    - latitude
    - longitude
    - provinceId
    type: object
  address.DeleteAddressCommand:
    properties:
      id:
        type: integer
    required:
    - id
    type: object
  address.GetAllAddressQuery:
    properties:
      page:
        minimum: 1
        type: integer
      pageSize:
        maximum: 100
        minimum: 1
        type: integer
      search:
        type: string
      searchBy:
        enum:
        - title
        - description
        type: string
      sort:
        enum:
        - asc
        - desc
        type: string
      sortBy:
        enum:
        - title
        - description
        type: string
    required:
    - page
    - pageSize
    type: object
  address.GetAllCityQuery:
    properties:
      page:
        minimum: 1
        type: integer
      pageSize:
        maximum: 100
        minimum: 1
        type: integer
      search:
        type: string
      searchBy:
        enum:
        - title
        - description
        type: string
      sort:
        enum:
        - asc
        - desc
        type: string
      sortBy:
        enum:
        - title
        - description
        type: string
    required:
    - page
    - pageSize
    type: object
  address.GetAllProvinceQuery:
    properties:
      page:
        minimum: 1
        type: integer
      pageSize:
        maximum: 100
        minimum: 1
        type: integer
      search:
        type: string
      searchBy:
        enum:
        - title
        - description
        type: string
      sort:
        enum:
        - asc
        - desc
        type: string
      sortBy:
        enum:
        - title
        - description
        type: string
    required:
    - page
    - pageSize
    type: object
  address.GetByIdAddressQuery:
    properties:
      id:
        type: integer
    required:
    - id
    type: object
  address.UpdateAddressCommand:
    properties:
      addressLine:
        type: string
      cityId:
        type: integer
      id:
        type: integer
      latitude:
        maximum: 90
        minimum: -90
        type: number
      longitude:
        maximum: 180
        minimum: -180
        type: number
      postalCode:
        type: string
      provinceId:
        type: integer
      title:
        type: string
    required:
    - cityId
    - id
    - provinceId
    type: object
  article.AdminGetAllArticleQuery:
    properties:
      page:
        minimum: 1
        type: integer
      pageSize:
        maximum: 100
        minimum: 1
        type: integer
      search:
        type: string
      searchBy:
        enum:
        - title
        - description
        type: string
      sort:
        enum:
        - asc
        - desc
        type: string
      sortBy:
        enum:
        - title
        - description
        type: string
    required:
    - page
    - pageSize
    type: object
  article.ArticleSortEnum:
    enum:
    - 0
    - 1
    - 2
    - 3
    - 4
    - 5
    - 6
    - 7
    - 8
    - 9
    type: integer
    x-enum-varnames:
    - TitleAZ
    - TitleZA
    - RecentlyAdded
    - RecentlyUpdated
    - MostVisited
    - LeastVisited
    - MostRated
    - LeastRated
    - MostReviewed
    - LeastReviewed
  article.CreateArticleCommand:
    properties:
      body:
        type: string
      categoryIds:
        items:
          type: integer
        type: array
      description:
        type: string
      mediaIds:
        items:
          type: integer
        type: array
      seoTags:
        items:
          type: string
        type: array
      siteId:
        type: integer
      slug:
        type: string
      title:
        type: string
    required:
    - siteId
    type: object
  article.DeleteArticleCommand:
    properties:
      id:
        type: integer
    required:
    - id
    type: object
  article.GetAllArticleQuery:
    properties:
      page:
        minimum: 1
        type: integer
      pageSize:
        maximum: 100
        minimum: 1
        type: integer
      search:
        type: string
      searchBy:
        enum:
        - title
        - description
        type: string
      siteId:
        type: integer
      sort:
        enum:
        - asc
        - desc
        type: string
      sortBy:
        enum:
        - title
        - description
        type: string
    required:
    - page
    - pageSize
    - siteId
    type: object
  article.GetByFiltersSortArticleQuery:
    properties:
      page:
        minimum: 1
        type: integer
      pageSize:
        maximum: 100
        minimum: 1
        type: integer
      search:
        type: string
      searchBy:
        enum:
        - title
        - description
        type: string
      selectedFilters:
        additionalProperties:
          items:
            type: string
          type: array
        type: object
      selectedSort:
        $ref: '#/definitions/article.ArticleSortEnum'
      siteId:
        type: integer
      sort:
        enum:
        - asc
        - desc
        type: string
      sortBy:
        enum:
        - title
        - description
        type: string
    required:
    - page
    - pageSize
    - siteId
    type: object
  article.GetByIdArticleQuery:
    properties:
      id:
        type: integer
    required:
    - id
    type: object
  article.UpdateArticleCommand:
    properties:
      body:
        type: string
      categoryIds:
        items:
          type: integer
        type: array
      description:
        type: string
      id:
        type: integer
      mediaIds:
        items:
          type: integer
        type: array
      seoTags:
        items:
          type: string
        type: array
      siteId:
        type: integer
      slug:
        type: string
      title:
        type: string
    required:
    - id
    - siteId
    type: object
  article_category.AdminGetAllCategoryQuery:
    properties:
      page:
        minimum: 1
        type: integer
      pageSize:
        maximum: 100
        minimum: 1
        type: integer
      search:
        type: string
      searchBy:
        enum:
        - title
        - description
        type: string
      sort:
        enum:
        - asc
        - desc
        type: string
      sortBy:
        enum:
        - title
        - description
        type: string
    required:
    - page
    - pageSize
    type: object
  article_category.CreateCategoryCommand:
    properties:
      description:
        type: string
      mediaIds:
        items:
          type: integer
        type: array
      name:
        type: string
      order:
        type: integer
      parentCategoryId:
        type: integer
      seoTags:
        items:
          type: string
        type: array
      siteId:
        type: integer
      slug:
        type: string
    required:
    - order
    - siteId
    type: object
  article_category.DeleteCategoryCommand:
    properties:
      id:
        type: integer
    required:
    - id
    type: object
  article_category.GetAllCategoryQuery:
    properties:
      page:
        minimum: 1
        type: integer
      pageSize:
        maximum: 100
        minimum: 1
        type: integer
      search:
        type: string
      searchBy:
        enum:
        - title
        - description
        type: string
      siteId:
        type: integer
      sort:
        enum:
        - asc
        - desc
        type: string
      sortBy:
        enum:
        - title
        - description
        type: string
    required:
    - page
    - pageSize
    - siteId
    type: object
  article_category.GetByIdCategoryQuery:
    properties:
      id:
        type: integer
    required:
    - id
    type: object
  article_category.UpdateCategoryCommand:
    properties:
      description:
        type: string
      id:
        type: integer
      mediaIds:
        items:
          type: integer
        type: array
      name:
        type: string
      order:
        type: integer
      parentCategoryId:
        type: integer
      seoTags:
        items:
          type: string
        type: array
      siteId:
        type: integer
      slug:
        type: string
    required:
    - id
    - siteId
    type: object
  basket.AdminGetAllBasketUserQuery:
    properties:
      page:
        minimum: 1
        type: integer
      pageSize:
        maximum: 100
        minimum: 1
        type: integer
      search:
        type: string
      searchBy:
        enum:
        - title
        - description
        type: string
      sort:
        enum:
        - asc
        - desc
        type: string
      sortBy:
        enum:
        - title
        - description
        type: string
    required:
    - page
    - pageSize
    type: object
  basket.BasketItemCommand:
    properties:
      basketItemId:
        type: integer
      productId:
        type: integer
      productVariantId:
        type: integer
      quantity:
        maximum: 1000
        type: integer
    required:
    - productId
    - quantity
    type: object
  basket.GetAllBasketUserQuery:
    properties:
      page:
        minimum: 1
        type: integer
      pageSize:
        maximum: 100
        minimum: 1
        type: integer
      search:
        type: string
      searchBy:
        enum:
        - title
        - description
        type: string
      siteId:
        type: integer
      sort:
        enum:
        - asc
        - desc
        type: string
      sortBy:
        enum:
        - title
        - description
        type: string
    required:
    - page
    - pageSize
    - siteId
    type: object
  basket.GetBasketQuery:
    properties:
      siteId:
        type: integer
    required:
    - siteId
    type: object
  basket.UpdateBasketCommand:
    properties:
      basketItems:
        items:
          $ref: '#/definitions/basket.BasketItemCommand'
        minItems: 1
        type: array
      code:
        type: string
      simpleAdd:
        type: boolean
      siteId:
        type: integer
    required:
    - basketItems
    - siteId
    type: object
  common_dto.PaginationJson:
    properties:
      hasNextPage:
        type: boolean
      hasPreviousPage:
        type: boolean
      items:
        items: {}
        type: array
      pageNumber:
        type: integer
      totalCount:
        type: integer
      totalPages:
        type: integer
    type: object
  customer.AdminGetAllCustomerQuery:
    properties:
      page:
        minimum: 1
        type: integer
      pageSize:
        maximum: 100
        minimum: 1
        type: integer
      search:
        type: string
      searchBy:
        enum:
        - title
        - description
        type: string
      sort:
        enum:
        - asc
        - desc
        type: string
      sortBy:
        enum:
        - title
        - description
        type: string
    required:
    - page
    - pageSize
    type: object
  customer.GetProfileCustomerQuery:
    type: object
  customer.LoginCustomerCommand:
    properties:
      email:
        type: string
      password:
        type: string
    required:
    - email
    type: object
  customer.RegisterCustomerCommand:
    properties:
      email:
        type: string
      password:
        type: string
      siteId:
        type: integer
    required:
    - email
    - siteId
    type: object
  customer.RequestVerifyAndForgetCustomerCommand:
    properties:
      email:
        type: string
      phone:
        type: string
      type:
        $ref: '#/definitions/user.VerifyTypeEnum'
    required:
    - email
    - phone
    - type
    type: object
  customer.UpdateProfileCustomerCommand:
    properties:
      addressIds:
        items:
          type: integer
        type: array
      email:
        type: string
      firstName:
        type: string
      lastName:
        type: string
      nationalCode:
        type: string
      password:
        type: string
      phone:
        type: string
    required:
    - phone
    type: object
  customer.VerifyCustomerQuery:
    properties:
      code:
        type: integer
      email:
        type: string
      type:
        $ref: '#/definitions/user.VerifyTypeEnum'
    required:
    - code
    - email
    - type
    type: object
  customer_ticket.AdminGetAllCustomerTicketQuery:
    properties:
      page:
        minimum: 1
        type: integer
      pageSize:
        maximum: 100
        minimum: 1
        type: integer
      search:
        type: string
      searchBy:
        enum:
        - title
        - description
        type: string
      sort:
        enum:
        - asc
        - desc
        type: string
      sortBy:
        enum:
        - title
        - description
        type: string
    required:
    - page
    - pageSize
    type: object
  customer_ticket.AdminReplayCustomerTicketCommand:
    properties:
      assignedTo:
        type: integer
      comment:
        $ref: '#/definitions/customer_ticket.CustomerCommentCommand'
      id:
        type: integer
      mediaIds:
        items:
          type: integer
        type: array
      priority:
        $ref: '#/definitions/customer_ticket.CustomerTicketPriorityEnum'
      product_category:
        $ref: '#/definitions/customer_ticket.CustomerTicketCategoryEnum'
      status:
        $ref: '#/definitions/customer_ticket.CustomerTicketStatusEnum'
    required:
    - assignedTo
    - comment
    - id
    - priority
    - product_category
    - status
    type: object
  customer_ticket.CreateCustomerTicketCommand:
    properties:
      comment:
        $ref: '#/definitions/customer_ticket.CustomerCommentCommand'
      mediaIds:
        items:
          type: integer
        type: array
      ownerUserId:
        type: integer
      priority:
        $ref: '#/definitions/customer_ticket.CustomerTicketPriorityEnum'
      product_category:
        $ref: '#/definitions/customer_ticket.CustomerTicketCategoryEnum'
      title:
        type: string
    required:
    - comment
    - ownerUserId
    - priority
    - product_category
    type: object
  customer_ticket.CustomerCommentCommand:
    properties:
      content:
        type: string
      respondentId:
        type: integer
    required:
    - respondentId
    type: object
  customer_ticket.CustomerTicketCategoryEnum:
    enum:
    - 0
    - 1
    - 2
    - 3
    - 4
    - 5
    type: integer
    x-enum-varnames:
    - Bug
    - Enhancement
    - FeatureRequest
    - Question
    - Documentation
    - Financial
  customer_ticket.CustomerTicketPriorityEnum:
    enum:
    - 0
    - 1
    - 2
    - 3
    type: integer
    x-enum-varnames:
    - Low
    - Medium
    - High
    - Critical
  customer_ticket.CustomerTicketStatusEnum:
    enum:
    - 0
    - 1
    - 2
    type: integer
    x-enum-varnames:
    - New
    - InProgress
    - Closed
  customer_ticket.GetAllCustomerTicketQuery:
    properties:
      page:
        minimum: 1
        type: integer
      pageSize:
        maximum: 100
        minimum: 1
        type: integer
      search:
        type: string
      searchBy:
        enum:
        - title
        - description
        type: string
      sort:
        enum:
        - asc
        - desc
        type: string
      sortBy:
        enum:
        - title
        - description
        type: string
    required:
    - page
    - pageSize
    type: object
  customer_ticket.GetByIdCustomerTicketQuery:
    properties:
      id:
        type: integer
    required:
    - id
    type: object
  customer_ticket.ReplayCustomerTicketCommand:
    properties:
      assignedTo:
        type: integer
      comment:
        $ref: '#/definitions/customer_ticket.CustomerCommentCommand'
      id:
        type: integer
      mediaIds:
        items:
          type: integer
        type: array
      priority:
        $ref: '#/definitions/customer_ticket.CustomerTicketPriorityEnum'
      product_category:
        $ref: '#/definitions/customer_ticket.CustomerTicketCategoryEnum'
      status:
        $ref: '#/definitions/customer_ticket.CustomerTicketStatusEnum'
    required:
    - assignedTo
    - comment
    - id
    - priority
    - product_category
    - status
    type: object
  defaulttheme.CreateDefaultThemeCommand:
    properties:
      demo:
        type: string
      description:
        type: string
      mediaId:
        type: integer
      name:
        type: string
      pages:
        type: string
    required:
    - mediaId
    type: object
  defaulttheme.DeleteDefaultThemeCommand:
    properties:
      id:
        type: integer
    required:
    - id
    type: object
  defaulttheme.GetAllDefaultThemeQuery:
    properties:
      page:
        minimum: 1
        type: integer
      pageSize:
        maximum: 100
        minimum: 1
        type: integer
      search:
        type: string
      searchBy:
        enum:
        - title
        - description
        type: string
      sort:
        enum:
        - asc
        - desc
        type: string
      sortBy:
        enum:
        - title
        - description
        type: string
    required:
    - page
    - pageSize
    type: object
  defaulttheme.GetByIdDefaultThemeQuery:
    properties:
      id:
        type: integer
    required:
    - id
    type: object
  defaulttheme.UpdateDefaultThemeCommand:
    properties:
      demo:
        type: string
      description:
        type: string
      id:
        type: integer
      mediaId:
        type: integer
      name:
        type: string
      pages:
        type: string
    required:
    - id
    type: object
  discount.AdminGetAllDiscountQuery:
    properties:
      page:
        minimum: 1
        type: integer
      pageSize:
        maximum: 100
        minimum: 1
        type: integer
      search:
        type: string
      searchBy:
        enum:
        - title
        - description
        type: string
      sort:
        enum:
        - asc
        - desc
        type: string
      sortBy:
        enum:
        - title
        - description
        type: string
    required:
    - page
    - pageSize
    type: object
  discount.CreateDiscountCommand:
    properties:
      code:
        type: string
      expiryDate:
        type: string
      quantity:
        maximum: 1000
        type: integer
      siteId:
        type: integer
      type:
        $ref: '#/definitions/product.DiscountTypeEnum'
      value:
        type: integer
    required:
    - expiryDate
    - quantity
    - siteId
    - type
    - value
    type: object
  discount.DeleteDiscountCommand:
    properties:
      id:
        type: integer
    required:
    - id
    type: object
  discount.GetAllDiscountQuery:
    properties:
      page:
        minimum: 1
        type: integer
      pageSize:
        maximum: 100
        minimum: 1
        type: integer
      search:
        type: string
      searchBy:
        enum:
        - title
        - description
        type: string
      siteId:
        type: integer
      sort:
        enum:
        - asc
        - desc
        type: string
      sortBy:
        enum:
        - title
        - description
        type: string
    required:
    - page
    - pageSize
    - siteId
    type: object
  discount.GetByIdDiscountQuery:
    properties:
      id:
        type: integer
    required:
    - id
    type: object
  discount.UpdateDiscountCommand:
    properties:
      code:
        type: string
      expiryDate:
        type: string
      id:
        type: integer
      quantity:
        type: integer
      type:
        $ref: '#/definitions/product.DiscountTypeEnum'
      value:
        type: integer
    required:
    - id
    type: object
  fileitem.CreateOrDirectoryItemCommand:
    type: object
  fileitem.DeleteFileItemCommand:
    properties:
      id:
        type: integer
    required:
    - id
    type: object
  fileitem.FileItemPermissionEnum:
    enum:
    - 0
    - 1
    type: integer
    x-enum-varnames:
    - Private
    - Public
  fileitem.FileOperationCommand:
    properties:
      id:
        type: integer
      newName:
        type: string
      newParentId:
        type: integer
      operationType:
        $ref: '#/definitions/fileitem.OperationType'
    required:
    - id
    - operationType
    type: object
  fileitem.ForceDeleteFileItemCommand:
    properties:
      id:
        type: integer
    required:
    - id
    type: object
  fileitem.GetByIdsQuery:
    properties:
      expireMinutes:
        type: integer
      idsOrder:
        items:
          $ref: '#/definitions/fileitem.MediaUrlRequest'
        type: array
      isTemporary:
        type: boolean
    required:
    - idsOrder
    - isTemporary
    type: object
  fileitem.GetDeletedTreeDirectoryQuery:
    type: object
  fileitem.GetDownloadFileItemByIdQuery:
    properties:
      id:
        type: integer
    required:
    - id
    type: object
  fileitem.GetTreeDirectoryQuery:
    properties:
      parentFileItemId:
        type: integer
    type: object
  fileitem.MediaUrlRequest:
    properties:
      id:
        type: integer
      order:
        type: integer
    required:
    - id
    - order
    type: object
  fileitem.OperationType:
    enum:
    - 0
    - 1
    - 2
    type: integer
    x-enum-varnames:
    - Copy
    - Move
    - Rename
  fileitem.RestoreFileItemCommand:
    properties:
      id:
        type: integer
    required:
    - id
    type: object
  fileitem.UpdateFileItemCommand:
    properties:
      id:
        type: integer
      isChangePermission:
        type: boolean
      permission:
        $ref: '#/definitions/fileitem.FileItemPermissionEnum'
    required:
    - id
    type: object
  header_footer.AdminGetAllHeaderFooterQuery:
    properties:
      page:
        minimum: 1
        type: integer
      pageSize:
        maximum: 100
        minimum: 1
        type: integer
      search:
        type: string
      searchBy:
        enum:
        - title
        - description
        type: string
      sort:
        enum:
        - asc
        - desc
        type: string
      sortBy:
        enum:
        - title
        - description
        type: string
    required:
    - page
    - pageSize
    type: object
  header_footer.CreateHeaderFooterCommand:
    properties:
      body:
        $ref: '#/definitions/header_footer.HeaderFooterBody'
      isMain:
        type: boolean
      siteId:
        type: integer
      title:
        type: string
      type:
        $ref: '#/definitions/header_footer.HeaderFooterTypeEnum'
    required:
    - body
    - siteId
    - type
    type: object
  header_footer.DeleteHeaderFooterCommand:
    properties:
      id:
        type: integer
    required:
    - id
    type: object
  header_footer.GetAllHeaderFooterQuery:
    properties:
      page:
        minimum: 1
        type: integer
      pageSize:
        maximum: 100
        minimum: 1
        type: integer
      search:
        type: string
      searchBy:
        enum:
        - title
        - description
        type: string
      siteId:
        type: integer
      sort:
        enum:
        - asc
        - desc
        type: string
      sortBy:
        enum:
        - title
        - description
        type: string
      type:
        $ref: '#/definitions/header_footer.HeaderFooterTypeEnum'
    required:
    - page
    - pageSize
    - siteId
    type: object
  header_footer.GetByIdHeaderFooterQuery:
    properties:
      id:
        type: integer
      ids:
        items:
          type: integer
        type: array
      siteId:
        type: integer
      type:
        $ref: '#/definitions/header_footer.HeaderFooterTypeEnum'
    required:
    - siteId
    type: object
  header_footer.HeaderFooterBody:
    properties:
      id:
        type: string
      props: {}
      rows:
        items:
          $ref: '#/definitions/header_footer.HeaderFooterRow'
        type: array
    type: object
  header_footer.HeaderFooterColumn:
    properties:
      components:
        items:
          $ref: '#/definitions/header_footer.HeaderFooterComponent'
        type: array
      id:
        type: string
      props: {}
      style: {}
    type: object
  header_footer.HeaderFooterComponent:
    properties:
      data:
        $ref: '#/definitions/common_dto.PaginationJson'
      filters:
        additionalProperties:
          items:
            type: string
          type: array
        type: object
      name:
        type: string
      props: {}
      sort:
        type: string
      title:
        type: string
    type: object
  header_footer.HeaderFooterRow:
    properties:
      columns:
        items:
          $ref: '#/definitions/header_footer.HeaderFooterColumn'
        type: array
      id:
        type: string
      props: {}
    type: object
  header_footer.HeaderFooterTypeEnum:
    enum:
    - 0
    - 1
    type: integer
    x-enum-varnames:
    - Header
    - Footer
  header_footer.UpdateHeaderFooterCommand:
    properties:
      body:
        $ref: '#/definitions/header_footer.HeaderFooterBody'
      id:
        type: integer
      isMain:
        type: boolean
      siteId:
        type: integer
      title:
        type: string
      type:
        $ref: '#/definitions/header_footer.HeaderFooterTypeEnum'
    required:
    - id
    - siteId
    - type
    type: object
  order.AdminGetAllOrderUserQuery:
    properties:
      page:
        minimum: 1
        type: integer
      pageSize:
        maximum: 100
        minimum: 1
        type: integer
      search:
        type: string
      searchBy:
        enum:
        - title
        - description
        type: string
      sort:
        enum:
        - asc
        - desc
        type: string
      sortBy:
        enum:
        - title
        - description
        type: string
    required:
    - page
    - pageSize
    type: object
  order.CourierEnum:
    enum:
    - 0
    - 1
    type: integer
    x-enum-varnames:
    - Post
    - Tipax
  order.CreateOrderRequestCommand:
    properties:
      addressId:
        type: integer
      courier:
        $ref: '#/definitions/order.CourierEnum'
      description:
        type: string
      finalFrontReturnUrl:
        type: string
      gateway:
        $ref: '#/definitions/order.PaymentGatewaysEnum'
      siteId:
        type: integer
    required:
    - addressId
    - gateway
    - siteId
    type: object
  order.CreateOrderVerifyCommand:
    properties:
      isSuccess:
        type: boolean
      orderData:
        additionalProperties:
          type: string
        type: object
      paymentStatus:
        type: string
      transaction_code:
        type: string
    required:
    - orderData
    type: object
  order.GetAllOrderCustomerQuery:
    properties:
      page:
        minimum: 1
        type: integer
      pageSize:
        maximum: 100
        minimum: 1
        type: integer
      search:
        type: string
      searchBy:
        enum:
        - title
        - description
        type: string
      sort:
        enum:
        - asc
        - desc
        type: string
      sortBy:
        enum:
        - title
        - description
        type: string
    required:
    - page
    - pageSize
    type: object
  order.GetAllOrderUserQuery:
    properties:
      page:
        minimum: 1
        type: integer
      pageSize:
        maximum: 100
        minimum: 1
        type: integer
      search:
        type: string
      searchBy:
        enum:
        - title
        - description
        type: string
      siteId:
        type: integer
      sort:
        enum:
        - asc
        - desc
        type: string
      sortBy:
        enum:
        - title
        - description
        type: string
    required:
    - page
    - pageSize
    - siteId
    type: object
  order.GetOrderCustomerDetailsQuery:
    properties:
      orderId:
        type: integer
    required:
    - orderId
    type: object
  order.GetOrderUserDetailsQuery:
    properties:
      orderId:
        type: integer
    required:
    - orderId
    type: object
  order.PaymentGatewaysEnum:
    enum:
    - 0
    - 1
    - 2
    - 3
    - 4
    - 5
    - 6
    - 7
    - 8
    - 9
    - 10
    - 11
    - 12
    - 13
    type: integer
    x-enum-varnames:
    - Saman
    - Mellat
    - Parsian
    - Pasargad
    - IranKish
    - Melli
    - AsanPardakht
    - Sepehr
    - ZarinPal
    - PayIr
    - IdPay
    - YekPay
    - PayPing
    - ParbadVirtual
  page.AdminGetAllPageQuery:
    properties:
      page:
        minimum: 1
        type: integer
      pageSize:
        maximum: 100
        minimum: 1
        type: integer
      search:
        type: string
      searchBy:
        enum:
        - title
        - description
        type: string
      sort:
        enum:
        - asc
        - desc
        type: string
      sortBy:
        enum:
        - title
        - description
        type: string
    required:
    - page
    - pageSize
    type: object
  page.CreatePageCommand:
    properties:
      body:
        $ref: '#/definitions/page.PageBody'
      description:
        type: string
      footerId:
        type: integer
      headerId:
        type: integer
      mediaIds:
        items:
          type: integer
        type: array
      seoTags:
        items:
          type: string
        type: array
      siteId:
        type: integer
      slug:
        type: string
      title:
        type: string
    required:
    - body
    - footerId
    - headerId
    - siteId
    - slug
    type: object
  page.DeletePageCommand:
    properties:
      id:
        type: integer
    required:
    - id
    type: object
  page.GetAllPageQuery:
    properties:
      page:
        minimum: 1
        type: integer
      pageSize:
        maximum: 100
        minimum: 1
        type: integer
      search:
        type: string
      searchBy:
        enum:
        - title
        - description
        type: string
      siteId:
        type: integer
      sort:
        enum:
        - asc
        - desc
        type: string
      sortBy:
        enum:
        - title
        - description
        type: string
    required:
    - page
    - pageSize
    - siteId
    type: object
  page.GetByIdPageQuery:
    properties:
      id:
        type: integer
      ids:
        items:
          type: integer
        type: array
      siteId:
        type: integer
    required:
    - siteId
    type: object
  page.PageBody:
    properties:
      id:
        type: string
      props: {}
      rows:
        items:
          $ref: '#/definitions/page.PageRow'
        type: array
    type: object
  page.PageColumn:
    properties:
      components:
        items:
          $ref: '#/definitions/page.PageComponent'
        type: array
      id:
        type: string
      props: {}
      style: {}
    type: object
  page.PageComponent:
    properties:
      data:
        $ref: '#/definitions/common_dto.PaginationJson'
      filters:
        additionalProperties:
          items:
            type: string
          type: array
        type: object
      name:
        type: string
      props: {}
      sort:
        type: string
      title:
        type: string
    type: object
  page.PageRow:
    properties:
      columns:
        items:
          $ref: '#/definitions/page.PageColumn'
        type: array
      id:
        type: string
      props: {}
    type: object
  page.UpdatePageCommand:
    properties:
      body:
        $ref: '#/definitions/page.PageBody'
      description:
        type: string
      footerId:
        type: integer
      headerId:
        type: integer
      id:
        type: integer
      mediaIds:
        items:
          type: integer
        type: array
      seoTags:
        items:
          type: string
        type: array
      siteId:
        type: integer
      slug:
        type: string
      title:
        type: string
    required:
    - id
    type: object
  payment.AdminGetAllGatewayQuery:
    properties:
      page:
        minimum: 1
        type: integer
      pageSize:
        maximum: 100
        minimum: 1
        type: integer
      search:
        type: string
      searchBy:
        enum:
        - title
        - description
        type: string
      sort:
        enum:
        - asc
        - desc
        type: string
      sortBy:
        enum:
        - title
        - description
        type: string
    required:
    - page
    - pageSize
    type: object
  payment.AdminGetAllPaymentQuery:
    properties:
      page:
        minimum: 1
        type: integer
      pageSize:
        maximum: 100
        minimum: 1
        type: integer
      search:
        type: string
      searchBy:
        enum:
        - title
        - description
        type: string
      sort:
        enum:
        - asc
        - desc
        type: string
      sortBy:
        enum:
        - title
        - description
        type: string
    required:
    - page
    - pageSize
    type: object
  payment.AsanPardakhtGateway:
    properties:
      iv:
        type: string
      key:
        type: string
      merchantConfigurationId:
        type: string
      password:
        type: string
      userName:
        type: string
    type: object
  payment.CreateOrUpdateGatewayCommand:
    properties:
      asanPardakht:
        $ref: '#/definitions/payment.AsanPardakhtGateway'
      idPay:
        $ref: '#/definitions/payment.IdPayGateway'
      iranKish:
        $ref: '#/definitions/payment.IranKishGateway'
      isActiveAsanPardakht:
        $ref: '#/definitions/payment.StatusEnum'
      isActiveIdPay:
        $ref: '#/definitions/payment.StatusEnum'
      isActiveIranKish:
        $ref: '#/definitions/payment.StatusEnum'
      isActiveMellat:
        $ref: '#/definitions/payment.StatusEnum'
      isActiveMelli:
        $ref: '#/definitions/payment.StatusEnum'
      isActiveParbadVirtual:
        $ref: '#/definitions/payment.StatusEnum'
      isActiveParsian:
        $ref: '#/definitions/payment.StatusEnum'
      isActivePasargad:
        $ref: '#/definitions/payment.StatusEnum'
      isActivePayIr:
        $ref: '#/definitions/payment.StatusEnum'
      isActivePayPing:
        $ref: '#/definitions/payment.StatusEnum'
      isActiveSaman:
        $ref: '#/definitions/payment.StatusEnum'
      isActiveSepehr:
        $ref: '#/definitions/payment.StatusEnum'
      isActiveYekPay:
        $ref: '#/definitions/payment.StatusEnum'
      isActiveZarinPal:
        $ref: '#/definitions/payment.StatusEnum'
      mellat:
        $ref: '#/definitions/payment.MellatGateway'
      melli:
        $ref: '#/definitions/payment.MelliGateway'
      parsian:
        $ref: '#/definitions/payment.ParsianGateway'
      pasargad:
        $ref: '#/definitions/payment.PasargadGateway'
      payIr:
        $ref: '#/definitions/payment.PayIrGateway'
      payPing:
        $ref: '#/definitions/payment.PayPingGateway'
      saman:
        $ref: '#/definitions/payment.SamanGateway'
      sepehr:
        $ref: '#/definitions/payment.SepehrGateway'
      siteId:
        type: integer
      yekPay:
        $ref: '#/definitions/payment.YekPayGateway'
      zarinPal:
        $ref: '#/definitions/payment.ZarinPalGateway'
    required:
    - siteId
    type: object
  payment.GetByIdGatewayQuery:
    properties:
      id:
        type: integer
    required:
    - id
    type: object
  payment.IdPayGateway:
    properties:
      api:
        type: string
      isTestAccount:
        type: boolean
    required:
    - isTestAccount
    type: object
  payment.IranKishGateway:
    properties:
      acceptorId:
        type: string
      passPhrase:
        type: string
      publicKey:
        type: string
      terminalId:
        type: string
    type: object
  payment.MellatGateway:
    properties:
      terminalId:
        type: integer
      userName:
        type: string
      userPassword:
        type: string
    required:
    - terminalId
    type: object
  payment.MelliGateway:
    properties:
      merchantId:
        type: string
      terminalId:
        type: string
      terminalKey:
        type: string
    type: object
  payment.ParsianGateway:
    properties:
      loginAccount:
        type: string
    type: object
  payment.PasargadGateway:
    properties:
      merchantCode:
        type: string
      privateKey:
        type: string
      terminalCode:
        type: string
    type: object
  payment.PayIrGateway:
    properties:
      api:
        type: string
      isTestAccount:
        type: boolean
    type: object
  payment.PayPingGateway:
    properties:
      accessToken:
        type: string
    type: object
  payment.PaymentGatewaysEnum:
    enum:
    - 0
    - 1
    - 2
    - 3
    - 4
    - 5
    - 6
    - 7
    - 8
    - 9
    - 10
    - 11
    - 12
    - 13
    type: integer
    x-enum-varnames:
    - Saman
    - Mellat
    - Parsian
    - Pasargad
    - IranKish
    - Melli
    - AsanPardakht
    - Sepehr
    - ZarinPal
    - PayIr
    - IdPay
    - YekPay
    - PayPing
    - ParbadVirtual
  payment.RequestGatewayCommand:
    properties:
      amount:
        type: integer
      callVerifyUrl:
        $ref: '#/definitions/payment.VerifyPaymentEndpointEnum'
      clientIp:
        type: string
      gateway:
        $ref: '#/definitions/payment.PaymentGatewaysEnum'
      orderData:
        additionalProperties:
          type: string
        type: object
      orderId:
        type: integer
      returnUrl:
        type: string
      serviceAction:
        type: string
      serviceName:
        type: string
      siteId:
        type: integer
      userId:
        type: integer
      userType:
        $ref: '#/definitions/payment.UserTypeEnum'
    required:
    - amount
    - callVerifyUrl
    - gateway
    - orderData
    - orderId
    - siteId
    - userId
    - userType
    type: object
  payment.SamanGateway:
    properties:
      merchantId:
        type: string
      password:
        type: string
    type: object
  payment.SepehrGateway:
    properties:
      terminalId:
        type: integer
    required:
    - terminalId
    type: object
  payment.StatusEnum:
    enum:
    - 0
    - 1
    type: integer
    x-enum-varnames:
    - Inactive
    - Active
  payment.UserTypeEnum:
    enum:
    - 0
    - 1
    - 2
    type: integer
    x-enum-varnames:
    - User
    - Customer
    - Guest
  payment.VerifyPaymentCommand:
    properties:
      paymentToken:
        type: string
      result:
        type: string
      transactionCode:
        type: string
    type: object
  payment.VerifyPaymentEndpointEnum:
    enum:
    - 0
    - 1
    - 2
    type: integer
    x-enum-varnames:
    - ChargeCreditVerify
    - UpgradePlanVerify
    - CreateOrderVerify
  payment.YekPayGateway:
    properties:
      merchantId:
        type: string
    type: object
  payment.ZarinPalGateway:
    properties:
      authorizationToken:
        type: string
      isSandbox:
        type: boolean
      merchantId:
        type: string
    type: object
  plan.CalculatePlanPriceQuery:
    properties:
      planId:
        type: integer
    required:
    - planId
    type: object
  plan.CreatePlanCommand:
    properties:
      aiCredits:
        minimum: 0
        type: integer
      aiImageCredits:
        minimum: 0
        type: integer
      description:
        type: string
      discount:
        maximum: 100
        minimum: 0
        type: integer
      discountType:
        $ref: '#/definitions/user.DiscountType'
      duration:
        minimum: 1
        type: integer
      emailCredits:
        minimum: 0
        type: integer
      feature:
        type: string
      name:
        type: string
      price:
        minimum: 0
        type: integer
      showStatus:
        type: string
      smsCredits:
        minimum: 0
        type: integer
      storageMbCredits:
        minimum: 0
        type: integer
    required:
    - aiCredits
    - aiImageCredits
    - duration
    - emailCredits
    - price
    - smsCredits
    - storageMbCredits
    type: object
  plan.DeletePlanCommand:
    properties:
      id:
        type: integer
    required:
    - id
    type: object
  plan.GetAllPlanQuery:
    properties:
      page:
        minimum: 1
        type: integer
      pageSize:
        maximum: 100
        minimum: 1
        type: integer
      search:
        type: string
      searchBy:
        enum:
        - title
        - description
        type: string
      sort:
        enum:
        - asc
        - desc
        type: string
      sortBy:
        enum:
        - title
        - description
        type: string
    required:
    - page
    - pageSize
    type: object
  plan.GetByIDPlanQuery:
    properties:
      id:
        type: integer
    required:
    - id
    type: object
  plan.UpdatePlanCommand:
    properties:
      aiCredits:
        minimum: 0
        type: integer
      aiImageCredits:
        minimum: 0
        type: integer
      description:
        type: string
      discount:
        maximum: 100
        minimum: 0
        type: integer
      discountType:
        $ref: '#/definitions/user.DiscountType'
      duration:
        minimum: 1
        type: integer
      emailCredits:
        minimum: 0
        type: integer
      feature:
        type: string
      id:
        type: integer
      name:
        type: string
      price:
        minimum: 0
        type: integer
      showStatus:
        type: string
      smsCredits:
        minimum: 0
        type: integer
      storageMbCredits:
        minimum: 0
        type: integer
    required:
    - id
    type: object
  product.AdminGetAllProductQuery:
    properties:
      page:
        minimum: 1
        type: integer
      pageSize:
        maximum: 100
        minimum: 1
        type: integer
      search:
        type: string
      searchBy:
        enum:
        - title
        - description
        type: string
      sort:
        enum:
        - asc
        - desc
        type: string
      sortBy:
        enum:
        - title
        - description
        type: string
    required:
    - page
    - pageSize
    type: object
  product.CouponCommand:
    properties:
      expiryDate:
        type: string
      quantity:
        type: integer
      type:
        $ref: '#/definitions/product.DiscountTypeEnum'
      value:
        type: integer
    required:
    - expiryDate
    - quantity
    - type
    - value
    type: object
  product.CreateProductCommand:
    properties:
      categoryIds:
        items:
          type: integer
        type: array
      coupon:
        $ref: '#/definitions/product.CouponCommand'
      description:
        type: string
      discountIds:
        items:
          type: integer
        type: array
      freeSend:
        type: boolean
      longDescription:
        type: string
      mediaIds:
        items:
          type: integer
        type: array
      name:
        type: string
      productAttributes:
        items:
          $ref: '#/definitions/product.ProductAttributeCommand'
        type: array
      productVariants:
        items:
          $ref: '#/definitions/product.ProductVariantCommand'
        minItems: 1
        type: array
      seoTags:
        items:
          type: string
        type: array
      siteId:
        type: integer
      slug:
        type: string
      status:
        $ref: '#/definitions/product.StatusEnum'
      weight:
        maximum: 1000
        type: integer
    required:
    - productVariants
    - siteId
    - slug
    - status
    - weight
    type: object
  product.DeleteProductCommand:
    properties:
      id:
        type: integer
    required:
    - id
    type: object
  product.DiscountTypeEnum:
    enum:
    - 0
    - 1
    type: integer
    x-enum-varnames:
    - Percentage
    - Value
  product.GetAllProductQuery:
    properties:
      page:
        minimum: 1
        type: integer
      pageSize:
        maximum: 100
        minimum: 1
        type: integer
      search:
        type: string
      searchBy:
        enum:
        - title
        - description
        type: string
      siteId:
        type: integer
      sort:
        enum:
        - asc
        - desc
        type: string
      sortBy:
        enum:
        - title
        - description
        type: string
    required:
    - page
    - pageSize
    - siteId
    type: object
  product.GetByFiltersSortProductQuery:
    properties:
      page:
        minimum: 1
        type: integer
      pageSize:
        maximum: 100
        minimum: 1
        type: integer
      search:
        type: string
      searchBy:
        enum:
        - title
        - description
        type: string
      selectedFilters:
        additionalProperties:
          items:
            type: string
          type: array
        type: object
      selectedSort:
        $ref: '#/definitions/product.ProductSortEnum'
      siteId:
        type: integer
      sort:
        enum:
        - asc
        - desc
        type: string
      sortBy:
        enum:
        - title
        - description
        type: string
    required:
    - page
    - pageSize
    - siteId
    type: object
  product.GetByIdProductQuery:
    properties:
      id:
        type: integer
    required:
    - id
    type: object
  product.ProductAttributeCommand:
    properties:
      id:
        type: integer
      name:
        type: string
      type:
        $ref: '#/definitions/product.ProductAttributeTypeEnum'
      value:
        type: string
    required:
    - type
    type: object
  product.ProductAttributeTypeEnum:
    enum:
    - 0
    - 1
    - 2
    type: integer
    x-enum-varnames:
    - Public
    - Technical
    - Other
  product.ProductSortEnum:
    enum:
    - 0
    - 1
    - 2
    - 3
    - 4
    - 5
    - 6
    - 7
    - 8
    - 9
    - 10
    - 11
    - 12
    - 13
    type: integer
    x-enum-varnames:
    - PriceLowToHigh
    - PriceHighToLow
    - CouponHighToLow
    - NameAZ
    - NameZA
    - RecentlyAdded
    - RecentlyUpdated
    - MostSelling
    - MostVisited
    - MostRated
    - MostReviewed
    - LeastVisited
    - LeastRated
    - LeastReviewed
  product.ProductVariantCommand:
    properties:
      id:
        type: integer
      name:
        type: string
      price:
        type: integer
      stock:
        type: integer
    required:
    - price
    - stock
    type: object
  product.StatusEnum:
    enum:
    - 0
    - 1
    type: integer
    x-enum-varnames:
    - Inactive
    - Active
  product.UpdateProductCommand:
    properties:
      categoryIds:
        items:
          type: integer
        type: array
      coupon:
        $ref: '#/definitions/product.CouponCommand'
      description:
        type: string
      discountIds:
        items:
          type: integer
        type: array
      freeSend:
        type: boolean
      id:
        type: integer
      longDescription:
        type: string
      mediaIds:
        items:
          type: integer
        type: array
      name:
        type: string
      productAttributes:
        items:
          $ref: '#/definitions/product.ProductAttributeCommand'
        type: array
      productVariants:
        items:
          $ref: '#/definitions/product.ProductVariantCommand'
        type: array
      seoTags:
        items:
          type: string
        type: array
      siteId:
        type: integer
      slug:
        type: string
      status:
        $ref: '#/definitions/product.StatusEnum'
      weight:
        type: integer
    required:
    - id
    - siteId
    type: object
  product_category.AdminGetAllCategoryQuery:
    properties:
      page:
        minimum: 1
        type: integer
      pageSize:
        maximum: 100
        minimum: 1
        type: integer
      search:
        type: string
      searchBy:
        enum:
        - title
        - description
        type: string
      sort:
        enum:
        - asc
        - desc
        type: string
      sortBy:
        enum:
        - title
        - description
        type: string
    required:
    - page
    - pageSize
    type: object
  product_category.CreateCategoryCommand:
    properties:
      description:
        type: string
      mediaIds:
        items:
          type: integer
        type: array
      name:
        type: string
      order:
        type: integer
      parentCategoryId:
        type: integer
      seoTags:
        items:
          type: string
        type: array
      siteId:
        type: integer
      slug:
        type: string
    required:
    - order
    - siteId
    - slug
    type: object
  product_category.DeleteCategoryCommand:
    properties:
      id:
        type: integer
    required:
    - id
    type: object
  product_category.GetAllCategoryQuery:
    properties:
      page:
        minimum: 1
        type: integer
      pageSize:
        maximum: 100
        minimum: 1
        type: integer
      search:
        type: string
      searchBy:
        enum:
        - title
        - description
        type: string
      siteId:
        type: integer
      sort:
        enum:
        - asc
        - desc
        type: string
      sortBy:
        enum:
        - title
        - description
        type: string
    required:
    - page
    - pageSize
    - siteId
    type: object
  product_category.GetByIdCategoryQuery:
    properties:
      id:
        type: integer
    required:
    - id
    type: object
  product_category.UpdateCategoryCommand:
    properties:
      description:
        type: string
      id:
        type: integer
      mediaIds:
        items:
          type: integer
        type: array
      name:
        type: string
      order:
        type: integer
      parentCategoryId:
        type: integer
      seoTags:
        items:
          type: string
        type: array
      siteId:
        type: integer
      slug:
        type: string
    required:
    - id
    - order
    - siteId
    type: object
  product_review.AdminGetAllProductReviewQuery:
    properties:
      page:
        minimum: 1
        type: integer
      pageSize:
        maximum: 100
        minimum: 1
        type: integer
      search:
        type: string
      searchBy:
        enum:
        - title
        - description
        type: string
      sort:
        enum:
        - asc
        - desc
        type: string
      sortBy:
        enum:
        - title
        - description
        type: string
    required:
    - page
    - pageSize
    type: object
  product_review.CreateProductReviewCommand:
    properties:
      approved:
        type: boolean
      dislike:
        minimum: 0
        type: integer
      like:
        minimum: 0
        type: integer
      productId:
        type: integer
      rating:
        maximum: 5
        minimum: 1
        type: integer
      reviewText:
        type: string
      siteId:
        type: integer
    required:
    - dislike
    - like
    - productId
    - rating
    - siteId
    type: object
  product_review.DeleteProductReviewCommand:
    properties:
      id:
        type: integer
    required:
    - id
    type: object
  product_review.GetAllProductReviewQuery:
    properties:
      page:
        minimum: 1
        type: integer
      pageSize:
        maximum: 100
        minimum: 1
        type: integer
      search:
        type: string
      searchBy:
        enum:
        - title
        - description
        type: string
      siteId:
        type: integer
      sort:
        enum:
        - asc
        - desc
        type: string
      sortBy:
        enum:
        - title
        - description
        type: string
    required:
    - page
    - pageSize
    - siteId
    type: object
  product_review.GetByIdProductReviewQuery:
    properties:
      id:
        type: integer
    required:
    - id
    type: object
  product_review.UpdateProductReviewCommand:
    properties:
      approved:
        type: boolean
      dislike:
        minimum: 0
        type: integer
      id:
        type: integer
      like:
        minimum: 0
        type: integer
      productId:
        type: integer
      rating:
        maximum: 5
        minimum: 1
        type: integer
      reviewText:
        type: string
      siteId:
        type: integer
    required:
    - id
    - productId
    type: object
  resp.Result:
    properties:
      data: {}
      errors:
        items:
          type: string
        type: array
      message:
        type: string
      statusCode:
        type: integer
      success:
        type: boolean
    type: object
  role.CreateRoleCommand:
    properties:
      name:
        type: string
      permissionIds:
        items:
          type: integer
        type: array
    type: object
  role.GetAllPermissionQuery:
    properties:
      page:
        minimum: 1
        type: integer
      pageSize:
        maximum: 100
        minimum: 1
        type: integer
      search:
        type: string
      searchBy:
        enum:
        - title
        - description
        type: string
      sort:
        enum:
        - asc
        - desc
        type: string
      sortBy:
        enum:
        - title
        - description
        type: string
    required:
    - page
    - pageSize
    type: object
  role.GetAllRoleQuery:
    properties:
      page:
        minimum: 1
        type: integer
      pageSize:
        maximum: 100
        minimum: 1
        type: integer
      search:
        type: string
      searchBy:
        enum:
        - title
        - description
        type: string
      sort:
        enum:
        - asc
        - desc
        type: string
      sortBy:
        enum:
        - title
        - description
        type: string
    required:
    - page
    - pageSize
    type: object
  role.GetRolePermissionsQuery:
    properties:
      page:
        minimum: 1
        type: integer
      pageSize:
        maximum: 100
        minimum: 1
        type: integer
      search:
        type: string
      searchBy:
        enum:
        - title
        - description
        type: string
      sort:
        enum:
        - asc
        - desc
        type: string
      sortBy:
        enum:
        - title
        - description
        type: string
    required:
    - page
    - pageSize
    type: object
  role.SetRoleToCustomerCommand:
    properties:
      customerId:
        type: integer
      role:
        items:
          type: string
        type: array
    required:
    - customerId
    type: object
  role.SetRoleToPlanCommand:
    properties:
      planId:
        type: integer
      roles:
        items:
          type: string
        type: array
    required:
    - planId
    type: object
  role.SetRoleToUserCommand:
    properties:
      roles:
        items:
          type: string
        type: array
      userId:
        type: integer
    required:
    - userId
    type: object
  role.UpdateRoleCommand:
    properties:
      id:
        type: integer
      name:
        type: string
      permissionIds:
        items:
          type: integer
        type: array
    required:
    - id
    type: object
  site.AdminGetAllSiteQuery:
    properties:
      page:
        minimum: 1
        type: integer
      pageSize:
        maximum: 100
        minimum: 1
        type: integer
      search:
        type: string
      searchBy:
        enum:
        - title
        - description
        type: string
      sort:
        enum:
        - asc
        - desc
        type: string
      sortBy:
        enum:
        - title
        - description
        type: string
    required:
    - page
    - pageSize
    type: object
  site.CreateSiteCommand:
    properties:
      domain:
        type: string
      domainType:
        $ref: '#/definitions/site.DomainTypeEnum'
      name:
        type: string
      siteType:
        $ref: '#/definitions/site.SiteTypeEnum'
      status:
        $ref: '#/definitions/site.StatusEnum'
    required:
    - domain
    - domainType
    - siteType
    - status
    type: object
  site.DeleteSiteCommand:
    properties:
      id:
        type: integer
    required:
    - id
    type: object
  site.DomainTypeEnum:
    enum:
    - 0
    - 1
    type: integer
    x-enum-varnames:
    - Domain
    - Subdomain
  site.GetAllSiteQuery:
    properties:
      page:
        minimum: 1
        type: integer
      pageSize:
        maximum: 100
        minimum: 1
        type: integer
      search:
        type: string
      searchBy:
        enum:
        - title
        - description
        type: string
      sort:
        enum:
        - asc
        - desc
        type: string
      sortBy:
        enum:
        - title
        - description
        type: string
    required:
    - page
    - pageSize
    type: object
  site.GetByIdSiteQuery:
    properties:
      id:
        type: integer
    required:
    - id
    type: object
  site.SiteTypeEnum:
    enum:
    - 0
    - 1
    - 2
    type: integer
    x-enum-varnames:
    - Shop
    - Blog
    - Business
  site.StatusEnum:
    enum:
    - 0
    - 1
    - 2
    - 3
    type: integer
    x-enum-varnames:
    - Active
    - Inactive
    - Pending
    - Deleted
  site.UpdateSiteCommand:
    properties:
      domain:
        type: string
      domainType:
        $ref: '#/definitions/site.DomainTypeEnum'
      id:
        type: integer
      name:
        type: string
      siteType:
        $ref: '#/definitions/site.SiteTypeEnum'
      status:
        $ref: '#/definitions/site.StatusEnum'
    required:
    - id
    type: object
  ticket.AdminGetAllTicketQuery:
    properties:
      page:
        minimum: 1
        type: integer
      pageSize:
        maximum: 100
        minimum: 1
        type: integer
      search:
        type: string
      searchBy:
        enum:
        - title
        - description
        type: string
      sort:
        enum:
        - asc
        - desc
        type: string
      sortBy:
        enum:
        - title
        - description
        type: string
    required:
    - page
    - pageSize
    type: object
  ticket.AdminReplayTicketCommand:
    properties:
      assignedTo:
        type: integer
      comment:
        $ref: '#/definitions/ticket.CommentCommand'
      id:
        type: integer
      mediaIds:
        items:
          type: integer
        type: array
      priority:
        $ref: '#/definitions/ticket.TicketPriorityEnum'
      product_category:
        $ref: '#/definitions/ticket.TicketCategoryEnum'
      status:
        $ref: '#/definitions/ticket.TicketStatusEnum'
    required:
    - comment
    - id
    - priority
    - product_category
    - status
    type: object
  ticket.CommentCommand:
    properties:
      content:
        type: string
      respondentId:
        type: integer
    required:
    - respondentId
    type: object
  ticket.CreateTicketCommand:
    properties:
      comment:
        $ref: '#/definitions/ticket.CommentCommand'
      mediaIds:
        items:
          type: integer
        type: array
      priority:
        $ref: '#/definitions/ticket.TicketPriorityEnum'
      product_category:
        $ref: '#/definitions/ticket.TicketCategoryEnum'
      title:
        type: string
    required:
    - comment
    - priority
    - product_category
    type: object
  ticket.GetAllTicketQuery:
    properties:
      page:
        minimum: 1
        type: integer
      pageSize:
        maximum: 100
        minimum: 1
        type: integer
      search:
        type: string
      searchBy:
        enum:
        - title
        - description
        type: string
      sort:
        enum:
        - asc
        - desc
        type: string
      sortBy:
        enum:
        - title
        - description
        type: string
    required:
    - page
    - pageSize
    type: object
  ticket.GetByIdTicketQuery:
    properties:
      id:
        type: integer
    required:
    - id
    type: object
  ticket.ReplayTicketCommand:
    properties:
      assignedTo:
        type: integer
      comment:
        $ref: '#/definitions/ticket.CommentCommand'
      id:
        type: integer
      mediaIds:
        items:
          type: integer
        type: array
      priority:
        $ref: '#/definitions/ticket.TicketPriorityEnum'
      product_category:
        $ref: '#/definitions/ticket.TicketCategoryEnum'
      status:
        $ref: '#/definitions/ticket.TicketStatusEnum'
    required:
    - assignedTo
    - comment
    - id
    - priority
    - product_category
    - status
    type: object
  ticket.TicketCategoryEnum:
    enum:
    - 0
    - 1
    - 2
    - 3
    - 4
    - 5
    type: integer
    x-enum-varnames:
    - Bug
    - Enhancement
    - FeatureRequest
    - Question
    - Documentation
    - Financial
  ticket.TicketPriorityEnum:
    enum:
    - 0
    - 1
    - 2
    - 3
    type: integer
    x-enum-varnames:
    - Low
    - Medium
    - High
    - Critical
  ticket.TicketStatusEnum:
    enum:
    - 0
    - 1
    - 2
    type: integer
    x-enum-varnames:
    - New
    - InProgress
    - Closed
  unit_price.CalculateUnitPriceQuery:
    properties:
      unitPrices:
        items:
          $ref: '#/definitions/unit_price.CalculateUnitPriceUnitPriceQuery'
        minItems: 1
        type: array
    required:
    - unitPrices
    type: object
  unit_price.CalculateUnitPriceUnitPriceQuery:
    properties:
      unitPriceCount:
        type: integer
      unitPriceDay:
        type: integer
      unitPriceName:
        $ref: '#/definitions/unit_price.UnitPriceNameEnum'
    required:
    - unitPriceCount
    - unitPriceName
    type: object
  unit_price.DiscountTypeEnum:
    enum:
    - 0
    - 1
    type: integer
    x-enum-varnames:
    - Fixed
    - Percentage
  unit_price.GetAllUnitPriceQuery:
    properties:
      page:
        minimum: 1
        type: integer
      pageSize:
        maximum: 100
        minimum: 1
        type: integer
      search:
        type: string
      searchBy:
        enum:
        - title
        - description
        type: string
      sort:
        enum:
        - asc
        - desc
        type: string
      sortBy:
        enum:
        - title
        - description
        type: string
    required:
    - page
    - pageSize
    type: object
  unit_price.UnitPriceNameEnum:
    enum:
    - 0
    - 1
    - 2
    - 3
    - 4
    - 5
    - 6
    - 7
    type: integer
    x-enum-varnames:
    - StorageMbCredits
    - PageViewCredits
    - FormSubmitCredits
    - SiteCredits
    - SmsCredits
    - EmailCredits
    - AiCredits
    - AiImageCredits
  unit_price.UpdateUnitPriceCommand:
    properties:
      discount:
        maximum: 100
        minimum: 0
        type: integer
      discountType:
        $ref: '#/definitions/unit_price.DiscountTypeEnum'
      hasDay:
        type: boolean
      id:
        type: integer
      name:
        type: string
      price:
        type: integer
    required:
    - id
    type: object
  user.AdminGetAllUserQuery:
    properties:
      page:
        minimum: 1
        type: integer
      pageSize:
        maximum: 100
        minimum: 1
        type: integer
      search:
        type: string
      searchBy:
        enum:
        - title
        - description
        type: string
      sort:
        enum:
        - asc
        - desc
        type: string
      sortBy:
        enum:
        - title
        - description
        type: string
    required:
    - page
    - pageSize
    type: object
  user.AiTypeEnum:
    enum:
    - 0
    - 1
    - 2
    type: integer
    x-enum-varnames:
    - GPT35
    - GPT4
    - Claude
  user.ChargeCreditRequestUserCommand:
    properties:
      finalFrontReturnUrl:
        type: string
      gateway:
        $ref: '#/definitions/user.PaymentGatewaysEnum'
      unitPrices:
        items:
          $ref: '#/definitions/user.UnitPriceQuery'
        minItems: 1
        type: array
    required:
    - gateway
    - unitPrices
    type: object
  user.DiscountType:
    enum:
    - 0
    - 1
    type: integer
    x-enum-varnames:
    - Fixed
    - Percentage
  user.GetProfileUserQuery:
    type: object
  user.LoginUserCommand:
    properties:
      email:
        type: string
      password:
        type: string
    required:
    - email
    type: object
  user.PaymentGatewaysEnum:
    enum:
    - 0
    - 1
    - 2
    type: integer
    x-enum-varnames:
    - ZarinPal
    - IDPay
    - NextPay
  user.RegisterUserCommand:
    properties:
      email:
        type: string
      password:
        type: string
    required:
    - email
    type: object
  user.RequestVerifyAndForgetUserCommand:
    properties:
      email:
        type: string
      phone:
        type: string
      type:
        $ref: '#/definitions/user.VerifyTypeEnum'
    required:
    - type
    type: object
  user.SmptSettings:
    properties:
      host:
        type: string
      password:
        type: string
      port:
        maximum: 65535
        minimum: 1
        type: integer
      username:
        type: string
    required:
    - port
    type: object
  user.StatusEnum:
    enum:
    - 0
    - 1
    type: integer
    x-enum-varnames:
    - Disabled
    - Enabled
  user.UnitPriceNameEnum:
    enum:
    - 0
    - 1
    - 2
    - 3
    - 4
    - 5
    - 6
    - 7
    type: integer
    x-enum-varnames:
    - StorageMbCredits
    - PageViewCredits
    - FormSubmitCredits
    - SiteCredits
    - SmsCredits
    - EmailCredits
    - AiCredits
    - AiImageCredits
  user.UnitPriceQuery:
    properties:
      unitPriceCount:
        maximum: 1000
        minimum: 1
        type: integer
      unitPriceDay:
        type: integer
      unitPriceName:
        $ref: '#/definitions/user.UnitPriceNameEnum'
    required:
    - unitPriceCount
    - unitPriceName
    type: object
  user.UpdateProfileUserCommand:
    properties:
      addressIds:
        items:
          type: integer
        type: array
      aiTypeEnum:
        $ref: '#/definitions/user.AiTypeEnum'
      email:
        type: string
      firstName:
        type: string
      lastName:
        type: string
      nationalCode:
        type: string
      password:
        type: string
      phone:
        type: string
      smtp:
        $ref: '#/definitions/user.SmptSettings'
      useCustomEmailSmtp:
        $ref: '#/definitions/user.StatusEnum'
    required:
    - phone
    type: object
  user.UpgradePlanRequestUserCommand:
    properties:
      finalFrontReturnUrl:
        type: string
      gateway:
        $ref: '#/definitions/user.PaymentGatewaysEnum'
      planId:
        type: integer
    required:
    - gateway
    - planId
    type: object
  user.VerifyTypeEnum:
    enum:
    - 0
    - 1
    - 2
    - 3
    type: integer
    x-enum-varnames:
    - VerifyEmail
    - VerifyPhone
    - ForgetPasswordEmail
    - ForgetPasswordPhone
  user.VerifyUserQuery:
    properties:
      code:
        type: integer
      email:
        type: string
      type:
        $ref: '#/definitions/user.VerifyTypeEnum'
    required:
    - code
    - email
    - type
    type: object
  website.ArticleSortEnum:
    enum:
    - 0
    - 1
    - 2
    - 3
    - 4
    - 5
    - 6
    - 7
    - 8
    - 9
    type: integer
    x-enum-varnames:
    - TitleAZ
    - TitleZA
    - RecentlyAdded
    - RecentlyUpdated
    - MostVisited
    - LeastVisited
    - MostRated
    - LeastRated
    - MostReviewed
    - LeastReviewed
  website.GetArticlesByCategorySlugQuery:
    properties:
      domain:
        type: string
      page:
        minimum: 1
        type: integer
      pageSize:
        maximum: 100
        minimum: 1
        type: integer
      search:
        type: string
      searchBy:
        enum:
        - title
        - description
        type: string
      siteId:
        type: integer
      slug:
        type: string
      sort:
        enum:
        - asc
        - desc
        type: string
      sortBy:
        enum:
        - title
        - description
        type: string
    required:
    - domain
    - page
    - pageSize
    - slug
    type: object
  website.GetByDomainHeaderFooterQuery:
    properties:
      domain:
        type: string
      siteId:
        type: integer
    required:
    - domain
    type: object
  website.GetByDomainPageQuery:
    properties:
      domain:
        type: string
      path:
        type: string
      siteId:
        type: integer
    required:
    - domain
    type: object
  website.GetFiltersSortArticleQuery:
    properties:
      domain:
        type: string
      page:
        minimum: 1
        type: integer
      pageSize:
        maximum: 100
        minimum: 1
        type: integer
      search:
        type: string
      searchBy:
        enum:
        - title
        - description
        type: string
      selectedFilters:
        additionalProperties:
          items:
            type: string
          type: array
        type: object
      selectedSort:
        $ref: '#/definitions/website.ArticleSortEnum'
      siteId:
        type: integer
      sort:
        enum:
        - asc
        - desc
        type: string
      sortBy:
        enum:
        - title
        - description
        type: string
    required:
    - domain
    - page
    - pageSize
    type: object
  website.GetFiltersSortProductQuery:
    properties:
      domain:
        type: string
      page:
        minimum: 1
        type: integer
      pageSize:
        maximum: 100
        minimum: 1
        type: integer
      search:
        type: string
      searchBy:
        enum:
        - title
        - description
        type: string
      selectedFilters:
        additionalProperties:
          items:
            type: string
          type: array
        type: object
      selectedSort:
        $ref: '#/definitions/product.ProductSortEnum'
      siteId:
        type: integer
      sort:
        enum:
        - asc
        - desc
        type: string
      sortBy:
        enum:
        - title
        - description
        type: string
    required:
    - domain
    - page
    - pageSize
    type: object
  website.GetProductsByCategorySlugQuery:
    properties:
      domain:
        type: string
      page:
        minimum: 1
        type: integer
      pageSize:
        maximum: 100
        minimum: 1
        type: integer
      search:
        type: string
      searchBy:
        enum:
        - title
        - description
        type: string
      siteId:
        type: integer
      slug:
        type: string
      sort:
        enum:
        - asc
        - desc
        type: string
      sortBy:
        enum:
        - title
        - description
        type: string
    required:
    - domain
    - page
    - pageSize
    - slug
    type: object
  website.GetSingleArticleBySlugQuery:
    properties:
      domain:
        type: string
      siteId:
        type: integer
      slug:
        type: string
    required:
    - domain
    - slug
    type: object
  website.GetSingleProductBySlugQuery:
    properties:
      domain:
        type: string
      siteId:
        type: integer
      slug:
        type: string
    required:
    - domain
    - slug
    type: object
  website.ProductSearchListQuery:
    properties:
      domain:
        type: string
      page:
        minimum: 1
        type: integer
      pageSize:
        maximum: 100
        minimum: 1
        type: integer
      search:
        type: string
      searchBy:
        enum:
        - title
        - description
        type: string
      siteId:
        type: integer
      sort:
        enum:
        - asc
        - desc
        type: string
      sortBy:
        enum:
        - title
        - description
        type: string
    required:
    - domain
    - page
    - pageSize
    type: object
info:
  contact: {}
paths:
  /address:
    delete:
      consumes:
      - application/json
      description: Deletes an address for the authenticated user
      parameters:
      - description: Address ID to delete
        in: body
        name: request
        required: true
        schema:
          $ref: '#/definitions/address.DeleteAddressCommand'
      produces:
      - application/json
      responses:
        "200":
          description: Deleted address confirmation
          schema:
            $ref: '#/definitions/resp.Result'
        "400":
          description: Validation error
          schema:
            $ref: '#/definitions/resp.Result'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/resp.Result'
        "404":
          description: Address not found
          schema:
            $ref: '#/definitions/resp.Result'
        "500":
          description: Internal server error
          schema:
            $ref: '#/definitions/resp.Result'
      security:
      - BearerAuth: []
      summary: Delete an address
      tags:
      - address
    get:
      consumes:
      - application/json
      description: Retrieves a specific address by its ID for the authenticated user
      parameters:
      - description: Address ID to retrieve
        in: body
        name: request
        required: true
        schema:
          $ref: '#/definitions/address.GetByIdAddressQuery'
      produces:
      - application/json
      responses:
        "200":
          description: Address details
          schema:
            $ref: '#/definitions/resp.Result'
        "400":
          description: Validation error
          schema:
            $ref: '#/definitions/resp.Result'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/resp.Result'
        "404":
          description: Address not found
          schema:
            $ref: '#/definitions/resp.Result'
        "500":
          description: Internal server error
          schema:
            $ref: '#/definitions/resp.Result'
      security:
      - BearerAuth: []
      summary: Get address by ID
      tags:
      - address
    post:
      consumes:
      - application/json
      description: Creates a new address for the authenticated user
      parameters:
      - description: Address information
        in: body
        name: request
        required: true
        schema:
          $ref: '#/definitions/address.CreateAddressCommand'
      produces:
      - application/json
      responses:
        "201":
          description: Created address
          schema:
            $ref: '#/definitions/resp.Result'
        "400":
          description: Validation error
          schema:
            $ref: '#/definitions/resp.Result'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/resp.Result'
        "500":
          description: Internal server error
          schema:
            $ref: '#/definitions/resp.Result'
      security:
      - BearerAuth: []
      summary: Create a new address
      tags:
      - address
    put:
      consumes:
      - application/json
      description: Updates an existing address for the authenticated user
      parameters:
      - description: Updated address information
        in: body
        name: request
        required: true
        schema:
          $ref: '#/definitions/address.UpdateAddressCommand'
      produces:
      - application/json
      responses:
        "200":
          description: Updated address
          schema:
            $ref: '#/definitions/resp.Result'
        "400":
          description: Validation error
          schema:
            $ref: '#/definitions/resp.Result'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/resp.Result'
        "404":
          description: Address not found
          schema:
            $ref: '#/definitions/resp.Result'
        "500":
          description: Internal server error
          schema:
            $ref: '#/definitions/resp.Result'
      security:
      - BearerAuth: []
      summary: Update an existing address
      tags:
      - address
  /address/admin/all:
    get:
      consumes:
      - application/json
      description: Admin endpoint to retrieve all addresses in the system
      parameters:
      - description: Query parameters
        in: body
        name: request
        required: true
        schema:
          $ref: '#/definitions/address.AdminGetAllAddressQuery'
      produces:
      - application/json
      responses:
        "200":
          description: List of all addresses
          schema:
            $ref: '#/definitions/resp.Result'
        "400":
          description: Validation error
          schema:
            $ref: '#/definitions/resp.Result'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/resp.Result'
        "403":
          description: Forbidden - Admin access required
          schema:
            $ref: '#/definitions/resp.Result'
        "500":
          description: Internal server error
          schema:
            $ref: '#/definitions/resp.Result'
      security:
      - BearerAuth: []
      summary: 'Admin: Get all addresses'
      tags:
      - address
  /address/all:
    get:
      consumes:
      - application/json
      description: Retrieves all addresses for the authenticated user
      parameters:
      - description: Query parameters
        in: body
        name: request
        required: true
        schema:
          $ref: '#/definitions/address.GetAllAddressQuery'
      produces:
      - application/json
      responses:
        "200":
          description: List of addresses
          schema:
            $ref: '#/definitions/resp.Result'
        "400":
          description: Validation error
          schema:
            $ref: '#/definitions/resp.Result'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/resp.Result'
        "500":
          description: Internal server error
          schema:
            $ref: '#/definitions/resp.Result'
      security:
      - BearerAuth: []
      summary: Get all addresses
      tags:
      - address
  /address/city/all:
    get:
      consumes:
      - application/json
      description: Retrieves all available cities
      parameters:
      - description: Query parameters
        in: body
        name: request
        required: true
        schema:
          $ref: '#/definitions/address.GetAllCityQuery'
      produces:
      - application/json
      responses:
        "200":
          description: List of cities
          schema:
            $ref: '#/definitions/resp.Result'
        "400":
          description: Validation error
          schema:
            $ref: '#/definitions/resp.Result'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/resp.Result'
        "500":
          description: Internal server error
          schema:
            $ref: '#/definitions/resp.Result'
      security:
      - BearerAuth: []
      summary: Get all cities
      tags:
      - address
  /address/province/all:
    get:
      consumes:
      - application/json
      description: Retrieves all available provinces
      parameters:
      - description: Query parameters
        in: body
        name: request
        required: true
        schema:
          $ref: '#/definitions/address.GetAllProvinceQuery'
      produces:
      - application/json
      responses:
        "200":
          description: List of provinces
          schema:
            $ref: '#/definitions/resp.Result'
        "400":
          description: Validation error
          schema:
            $ref: '#/definitions/resp.Result'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/resp.Result'
        "500":
          description: Internal server error
          schema:
            $ref: '#/definitions/resp.Result'
      security:
      - BearerAuth: []
      summary: Get all provinces
      tags:
      - address
  /article:
    delete:
      consumes:
      - application/json
      description: Deletes an existing article by its ID
      parameters:
      - description: Article ID to delete
        in: body
        name: request
        required: true
        schema:
          $ref: '#/definitions/article.DeleteArticleCommand'
      produces:
      - application/json
      responses:
        "200":
          description: Deleted article confirmation
          schema:
            $ref: '#/definitions/resp.Result'
        "400":
          description: Validation error
          schema:
            $ref: '#/definitions/resp.Result'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/resp.Result'
        "404":
          description: Article not found
          schema:
            $ref: '#/definitions/resp.Result'
        "500":
          description: Internal server error
          schema:
            $ref: '#/definitions/resp.Result'
      security:
      - BearerAuth: []
      summary: Delete an article
      tags:
      - article
    get:
      consumes:
      - application/json
      description: Retrieves a specific article by its ID
      parameters:
      - description: Article ID to retrieve
        in: body
        name: request
        required: true
        schema:
          $ref: '#/definitions/article.GetByIdArticleQuery'
      produces:
      - application/json
      responses:
        "200":
          description: Article details
          schema:
            $ref: '#/definitions/resp.Result'
        "400":
          description: Validation error
          schema:
            $ref: '#/definitions/resp.Result'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/resp.Result'
        "404":
          description: Article not found
          schema:
            $ref: '#/definitions/resp.Result'
        "500":
          description: Internal server error
          schema:
            $ref: '#/definitions/resp.Result'
      security:
      - BearerAuth: []
      summary: Get article by ID
      tags:
      - article
    post:
      consumes:
      - application/json
      description: Creates a new article with the provided information
      parameters:
      - description: Article information
        in: body
        name: request
        required: true
        schema:
          $ref: '#/definitions/article.CreateArticleCommand'
      produces:
      - application/json
      responses:
        "201":
          description: Created article
          schema:
            $ref: '#/definitions/resp.Result'
        "400":
          description: Validation error
          schema:
            $ref: '#/definitions/resp.Result'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/resp.Result'
        "500":
          description: Internal server error
          schema:
            $ref: '#/definitions/resp.Result'
      security:
      - BearerAuth: []
      summary: Create a new article
      tags:
      - article
    put:
      consumes:
      - application/json
      description: Updates an existing article with the provided information
      parameters:
      - description: Updated article information
        in: body
        name: request
        required: true
        schema:
          $ref: '#/definitions/article.UpdateArticleCommand'
      produces:
      - application/json
      responses:
        "200":
          description: Updated article
          schema:
            $ref: '#/definitions/resp.Result'
        "400":
          description: Validation error
          schema:
            $ref: '#/definitions/resp.Result'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/resp.Result'
        "404":
          description: Article not found
          schema:
            $ref: '#/definitions/resp.Result'
        "500":
          description: Internal server error
          schema:
            $ref: '#/definitions/resp.Result'
      security:
      - BearerAuth: []
      summary: Update an article
      tags:
      - article
  /article-category:
    delete:
      consumes:
      - application/json
      description: Deletes an existing article category by its ID
      parameters:
      - description: Category ID to delete
        in: body
        name: request
        required: true
        schema:
          $ref: '#/definitions/article_category.DeleteCategoryCommand'
      produces:
      - application/json
      responses:
        "200":
          description: Deleted category confirmation
          schema:
            $ref: '#/definitions/resp.Result'
        "400":
          description: Validation error
          schema:
            $ref: '#/definitions/resp.Result'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/resp.Result'
        "404":
          description: Category not found
          schema:
            $ref: '#/definitions/resp.Result'
        "500":
          description: Internal server error
          schema:
            $ref: '#/definitions/resp.Result'
      security:
      - BearerAuth: []
      summary: Delete an article category
      tags:
      - article-category
    get:
      consumes:
      - application/json
      description: Retrieves a specific article category by its ID
      parameters:
      - description: Category ID to retrieve
        in: body
        name: request
        required: true
        schema:
          $ref: '#/definitions/article_category.GetByIdCategoryQuery'
      produces:
      - application/json
      responses:
        "200":
          description: Category details
          schema:
            $ref: '#/definitions/resp.Result'
        "400":
          description: Validation error
          schema:
            $ref: '#/definitions/resp.Result'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/resp.Result'
        "404":
          description: Category not found
          schema:
            $ref: '#/definitions/resp.Result'
        "500":
          description: Internal server error
          schema:
            $ref: '#/definitions/resp.Result'
      security:
      - BearerAuth: []
      summary: Get article category by ID
      tags:
      - article-category
    post:
      consumes:
      - application/json
      description: Creates a new category for articles with the provided information
      parameters:
      - description: Category information
        in: body
        name: request
        required: true
        schema:
          $ref: '#/definitions/article_category.CreateCategoryCommand'
      produces:
      - application/json
      responses:
        "201":
          description: Created category
          schema:
            $ref: '#/definitions/resp.Result'
        "400":
          description: Validation error
          schema:
            $ref: '#/definitions/resp.Result'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/resp.Result'
        "500":
          description: Internal server error
          schema:
            $ref: '#/definitions/resp.Result'
      security:
      - BearerAuth: []
      summary: Create a new article category
      tags:
      - article-category
    put:
      consumes:
      - application/json
      description: Updates an existing article category with the provided information
      parameters:
      - description: Updated category information
        in: body
        name: request
        required: true
        schema:
          $ref: '#/definitions/article_category.UpdateCategoryCommand'
      produces:
      - application/json
      responses:
        "200":
          description: Updated category
          schema:
            $ref: '#/definitions/resp.Result'
        "400":
          description: Validation error
          schema:
            $ref: '#/definitions/resp.Result'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/resp.Result'
        "404":
          description: Category not found
          schema:
            $ref: '#/definitions/resp.Result'
        "500":
          description: Internal server error
          schema:
            $ref: '#/definitions/resp.Result'
      security:
      - BearerAuth: []
      summary: Update an article category
      tags:
      - article-category
  /article-category/admin/all:
    get:
      consumes:
      - application/json
      description: Admin endpoint to retrieve all article categories with additional
        information
      parameters:
      - description: Query parameters
        in: body
        name: request
        required: true
        schema:
          $ref: '#/definitions/article_category.AdminGetAllCategoryQuery'
      produces:
      - application/json
      responses:
        "200":
          description: List of all categories
          schema:
            $ref: '#/definitions/resp.Result'
        "400":
          description: Validation error
          schema:
            $ref: '#/definitions/resp.Result'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/resp.Result'
        "403":
          description: Forbidden - Admin access required
          schema:
            $ref: '#/definitions/resp.Result'
        "500":
          description: Internal server error
          schema:
            $ref: '#/definitions/resp.Result'
      security:
      - BearerAuth: []
      summary: 'Admin: Get all article categories'
      tags:
      - article-category
  /article-category/all:
    get:
      consumes:
      - application/json
      description: Retrieves all article categories with optional filtering
      parameters:
      - description: Query parameters
        in: body
        name: request
        required: true
        schema:
          $ref: '#/definitions/article_category.GetAllCategoryQuery'
      produces:
      - application/json
      responses:
        "200":
          description: List of categories
          schema:
            $ref: '#/definitions/resp.Result'
        "400":
          description: Validation error
          schema:
            $ref: '#/definitions/resp.Result'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/resp.Result'
        "500":
          description: Internal server error
          schema:
            $ref: '#/definitions/resp.Result'
      security:
      - BearerAuth: []
      summary: Get all article categories
      tags:
      - article-category
  /article/admin/all:
    get:
      consumes:
      - application/json
      description: Admin endpoint to retrieve all articles with additional information
      parameters:
      - description: Query parameters
        in: body
        name: request
        required: true
        schema:
          $ref: '#/definitions/article.AdminGetAllArticleQuery'
      produces:
      - application/json
      responses:
        "200":
          description: List of all articles
          schema:
            $ref: '#/definitions/resp.Result'
        "400":
          description: Validation error
          schema:
            $ref: '#/definitions/resp.Result'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/resp.Result'
        "403":
          description: Forbidden - Admin access required
          schema:
            $ref: '#/definitions/resp.Result'
        "500":
          description: Internal server error
          schema:
            $ref: '#/definitions/resp.Result'
      security:
      - BearerAuth: []
      summary: 'Admin: Get all articles'
      tags:
      - article
  /article/all:
    get:
      consumes:
      - application/json
      description: Retrieves all articles with optional filtering
      parameters:
      - description: Query parameters
        in: body
        name: request
        required: true
        schema:
          $ref: '#/definitions/article.GetAllArticleQuery'
      produces:
      - application/json
      responses:
        "200":
          description: List of articles
          schema:
            $ref: '#/definitions/resp.Result'
        "400":
          description: Validation error
          schema:
            $ref: '#/definitions/resp.Result'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/resp.Result'
        "500":
          description: Internal server error
          schema:
            $ref: '#/definitions/resp.Result'
      security:
      - BearerAuth: []
      summary: Get all articles
      tags:
      - article
  /article/filters-sort:
    post:
      consumes:
      - application/json
      description: Retrieves articles based on specified filters and sorting criteria
      parameters:
      - description: Filter and sort parameters
        in: body
        name: request
        required: true
        schema:
          $ref: '#/definitions/article.GetByFiltersSortArticleQuery'
      produces:
      - application/json
      responses:
        "200":
          description: Filtered and sorted articles
          schema:
            $ref: '#/definitions/resp.Result'
        "400":
          description: Validation error
          schema:
            $ref: '#/definitions/resp.Result'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/resp.Result'
        "500":
          description: Internal server error
          schema:
            $ref: '#/definitions/resp.Result'
      security:
      - BearerAuth: []
      summary: Get articles by filters and sorting
      tags:
      - article
  /basket:
    get:
      consumes:
      - application/json
      description: Retrieves the current user's shopping basket
      parameters:
      - description: Query parameters
        in: body
        name: request
        required: true
        schema:
          $ref: '#/definitions/basket.GetBasketQuery'
      produces:
      - application/json
      responses:
        "200":
          description: Basket details
          schema:
            $ref: '#/definitions/resp.Result'
        "400":
          description: Validation error
          schema:
            $ref: '#/definitions/resp.Result'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/resp.Result'
        "404":
          description: Basket not found
          schema:
            $ref: '#/definitions/resp.Result'
        "500":
          description: Internal server error
          schema:
            $ref: '#/definitions/resp.Result'
      security:
      - BearerAuth: []
      summary: Get current basket
      tags:
      - basket
    put:
      consumes:
      - application/json
      description: Updates the user's shopping basket with new items or quantities
      parameters:
      - description: Updated basket information
        in: body
        name: request
        required: true
        schema:
          $ref: '#/definitions/basket.UpdateBasketCommand'
      produces:
      - application/json
      responses:
        "200":
          description: Updated basket
          schema:
            $ref: '#/definitions/resp.Result'
        "400":
          description: Validation error
          schema:
            $ref: '#/definitions/resp.Result'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/resp.Result'
        "500":
          description: Internal server error
          schema:
            $ref: '#/definitions/resp.Result'
      security:
      - BearerAuth: []
      summary: Update shopping basket
      tags:
      - basket
  /basket/admin/all:
    get:
      consumes:
      - application/json
      description: Admin endpoint to retrieve all shopping baskets across all users
      parameters:
      - description: Query parameters
        in: body
        name: request
        required: true
        schema:
          $ref: '#/definitions/basket.AdminGetAllBasketUserQuery'
      produces:
      - application/json
      responses:
        "200":
          description: List of all user baskets
          schema:
            $ref: '#/definitions/resp.Result'
        "400":
          description: Validation error
          schema:
            $ref: '#/definitions/resp.Result'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/resp.Result'
        "403":
          description: Forbidden - Admin access required
          schema:
            $ref: '#/definitions/resp.Result'
        "500":
          description: Internal server error
          schema:
            $ref: '#/definitions/resp.Result'
      security:
      - BearerAuth: []
      summary: 'Admin: Get all user baskets'
      tags:
      - basket
  /basket/user/all:
    get:
      consumes:
      - application/json
      description: Retrieves all shopping baskets for the current user
      parameters:
      - description: Query parameters
        in: body
        name: request
        required: true
        schema:
          $ref: '#/definitions/basket.GetAllBasketUserQuery'
      produces:
      - application/json
      responses:
        "200":
          description: List of user baskets
          schema:
            $ref: '#/definitions/resp.Result'
        "400":
          description: Validation error
          schema:
            $ref: '#/definitions/resp.Result'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/resp.Result'
        "500":
          description: Internal server error
          schema:
            $ref: '#/definitions/resp.Result'
      security:
      - BearerAuth: []
      summary: Get all user baskets
      tags:
      - basket
  /customer-ticket:
    get:
      consumes:
      - application/json
      description: Retrieves a specific customer support ticket by its ID
      parameters:
      - description: Ticket ID to retrieve
        in: body
        name: request
        required: true
        schema:
          $ref: '#/definitions/customer_ticket.GetByIdCustomerTicketQuery'
      produces:
      - application/json
      responses:
        "200":
          description: Ticket details
          schema:
            $ref: '#/definitions/resp.Result'
        "400":
          description: Validation error
          schema:
            $ref: '#/definitions/resp.Result'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/resp.Result'
        "404":
          description: Ticket not found
          schema:
            $ref: '#/definitions/resp.Result'
        "500":
          description: Internal server error
          schema:
            $ref: '#/definitions/resp.Result'
      security:
      - BearerAuth: []
      summary: Get customer ticket by ID
      tags:
      - customer-ticket
    post:
      consumes:
      - application/json
      description: Creates a new support ticket for a customer
      parameters:
      - description: Ticket information
        in: body
        name: request
        required: true
        schema:
          $ref: '#/definitions/customer_ticket.CreateCustomerTicketCommand'
      produces:
      - application/json
      responses:
        "201":
          description: Created ticket
          schema:
            $ref: '#/definitions/resp.Result'
        "400":
          description: Validation error
          schema:
            $ref: '#/definitions/resp.Result'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/resp.Result'
        "500":
          description: Internal server error
          schema:
            $ref: '#/definitions/resp.Result'
      security:
      - BearerAuth: []
      summary: Create a customer support ticket
      tags:
      - customer-ticket
    put:
      consumes:
      - application/json
      description: Adds a customer reply to an existing support ticket
      parameters:
      - description: Reply information
        in: body
        name: request
        required: true
        schema:
          $ref: '#/definitions/customer_ticket.ReplayCustomerTicketCommand'
      produces:
      - application/json
      responses:
        "200":
          description: Updated ticket with reply
          schema:
            $ref: '#/definitions/resp.Result'
        "400":
          description: Validation error
          schema:
            $ref: '#/definitions/resp.Result'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/resp.Result'
        "404":
          description: Ticket not found
          schema:
            $ref: '#/definitions/resp.Result'
        "500":
          description: Internal server error
          schema:
            $ref: '#/definitions/resp.Result'
      security:
      - BearerAuth: []
      summary: Reply to a customer ticket
      tags:
      - customer-ticket
  /customer-ticket/admin:
    put:
      consumes:
      - application/json
      description: Adds an admin reply to an existing customer support ticket
      parameters:
      - description: Admin reply information
        in: body
        name: request
        required: true
        schema:
          $ref: '#/definitions/customer_ticket.AdminReplayCustomerTicketCommand'
      produces:
      - application/json
      responses:
        "200":
          description: Updated ticket with admin reply
          schema:
            $ref: '#/definitions/resp.Result'
        "400":
          description: Validation error
          schema:
            $ref: '#/definitions/resp.Result'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/resp.Result'
        "403":
          description: Forbidden - Admin access required
          schema:
            $ref: '#/definitions/resp.Result'
        "404":
          description: Ticket not found
          schema:
            $ref: '#/definitions/resp.Result'
        "500":
          description: Internal server error
          schema:
            $ref: '#/definitions/resp.Result'
      security:
      - BearerAuth: []
      summary: 'Admin: Reply to a customer ticket'
      tags:
      - customer-ticket
  /customer-ticket/admin/all:
    get:
      consumes:
      - application/json
      description: Admin endpoint to retrieve all customer support tickets across
        all customers
      parameters:
      - description: Query parameters
        in: body
        name: request
        required: true
        schema:
          $ref: '#/definitions/customer_ticket.AdminGetAllCustomerTicketQuery'
      produces:
      - application/json
      responses:
        "200":
          description: List of all customer tickets
          schema:
            $ref: '#/definitions/resp.Result'
        "400":
          description: Validation error
          schema:
            $ref: '#/definitions/resp.Result'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/resp.Result'
        "403":
          description: Forbidden - Admin access required
          schema:
            $ref: '#/definitions/resp.Result'
        "500":
          description: Internal server error
          schema:
            $ref: '#/definitions/resp.Result'
      security:
      - BearerAuth: []
      summary: 'Admin: Get all customer tickets'
      tags:
      - customer-ticket
  /customer-ticket/all:
    get:
      consumes:
      - application/json
      description: Retrieves all support tickets for the current customer
      parameters:
      - description: Query parameters
        in: body
        name: request
        required: true
        schema:
          $ref: '#/definitions/customer_ticket.GetAllCustomerTicketQuery'
      produces:
      - application/json
      responses:
        "200":
          description: List of customer tickets
          schema:
            $ref: '#/definitions/resp.Result'
        "400":
          description: Validation error
          schema:
            $ref: '#/definitions/resp.Result'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/resp.Result'
        "500":
          description: Internal server error
          schema:
            $ref: '#/definitions/resp.Result'
      security:
      - BearerAuth: []
      summary: Get all customer tickets
      tags:
      - customer-ticket
  /customer/admin/all:
    get:
      consumes:
      - application/json
      description: Admin endpoint to retrieve all customers with additional information
      parameters:
      - description: Query parameters
        in: body
        name: request
        required: true
        schema:
          $ref: '#/definitions/customer.AdminGetAllCustomerQuery'
      produces:
      - application/json
      responses:
        "200":
          description: List of all customers
          schema:
            $ref: '#/definitions/resp.Result'
        "400":
          description: Validation error
          schema:
            $ref: '#/definitions/resp.Result'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/resp.Result'
        "403":
          description: Forbidden - Admin access required
          schema:
            $ref: '#/definitions/resp.Result'
        "500":
          description: Internal server error
          schema:
            $ref: '#/definitions/resp.Result'
      security:
      - BearerAuth: []
      summary: 'Admin: Get all customers'
      tags:
      - customer
  /customer/login:
    post:
      consumes:
      - application/json
      description: Authenticates a customer and returns an access token
      parameters:
      - description: Login credentials
        in: body
        name: request
        required: true
        schema:
          $ref: '#/definitions/customer.LoginCustomerCommand'
      produces:
      - application/json
      responses:
        "200":
          description: Authentication token
          schema:
            $ref: '#/definitions/resp.Result'
        "400":
          description: Validation error
          schema:
            $ref: '#/definitions/resp.Result'
        "401":
          description: Invalid credentials
          schema:
            $ref: '#/definitions/resp.Result'
        "500":
          description: Internal server error
          schema:
            $ref: '#/definitions/resp.Result'
      security:
      - BearerAuth: []
      summary: Customer login
      tags:
      - customer
  /customer/profile:
    get:
      consumes:
      - application/json
      description: Retrieves the authenticated customer's profile information
      parameters:
      - description: Query parameters
        in: body
        name: request
        required: true
        schema:
          $ref: '#/definitions/customer.GetProfileCustomerQuery'
      produces:
      - application/json
      responses:
        "200":
          description: Customer profile
          schema:
            $ref: '#/definitions/resp.Result'
        "400":
          description: Validation error
          schema:
            $ref: '#/definitions/resp.Result'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/resp.Result'
        "404":
          description: Profile not found
          schema:
            $ref: '#/definitions/resp.Result'
        "500":
          description: Internal server error
          schema:
            $ref: '#/definitions/resp.Result'
      security:
      - BearerAuth: []
      summary: Get customer profile
      tags:
      - customer
    put:
      consumes:
      - application/json
      description: Updates the authenticated customer's profile information
      parameters:
      - description: Updated profile information
        in: body
        name: request
        required: true
        schema:
          $ref: '#/definitions/customer.UpdateProfileCustomerCommand'
      produces:
      - application/json
      responses:
        "200":
          description: Updated profile
          schema:
            $ref: '#/definitions/resp.Result'
        "400":
          description: Validation error
          schema:
            $ref: '#/definitions/resp.Result'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/resp.Result'
        "500":
          description: Internal server error
          schema:
            $ref: '#/definitions/resp.Result'
      security:
      - BearerAuth: []
      summary: Update customer profile
      tags:
      - customer
  /customer/register:
    post:
      consumes:
      - application/json
      description: Registers a new customer account with the provided information
      parameters:
      - description: Customer registration information
        in: body
        name: request
        required: true
        schema:
          $ref: '#/definitions/customer.RegisterCustomerCommand'
      produces:
      - application/json
      responses:
        "201":
          description: Registered customer
          schema:
            $ref: '#/definitions/resp.Result'
        "400":
          description: Validation error
          schema:
            $ref: '#/definitions/resp.Result'
        "409":
          description: Email already exists
          schema:
            $ref: '#/definitions/resp.Result'
        "500":
          description: Internal server error
          schema:
            $ref: '#/definitions/resp.Result'
      security:
      - BearerAuth: []
      summary: Register new customer
      tags:
      - customer
  /customer/verify:
    get:
      consumes:
      - application/json
      description: Verifies a customer's email address using the verification token
      parameters:
      - description: Verification token
        in: body
        name: request
        required: true
        schema:
          $ref: '#/definitions/customer.VerifyCustomerQuery'
      produces:
      - application/json
      responses:
        "200":
          description: Verification successful
          schema:
            $ref: '#/definitions/resp.Result'
        "400":
          description: Validation error
          schema:
            $ref: '#/definitions/resp.Result'
        "401":
          description: Invalid token
          schema:
            $ref: '#/definitions/resp.Result'
        "500":
          description: Internal server error
          schema:
            $ref: '#/definitions/resp.Result'
      security:
      - BearerAuth: []
      summary: Verify customer email
      tags:
      - customer
  /customer/verify-forget:
    post:
      consumes:
      - application/json
      description: Sends verification email or password reset link to the customer's
        email
      parameters:
      - description: Email information
        in: body
        name: request
        required: true
        schema:
          $ref: '#/definitions/customer.RequestVerifyAndForgetCustomerCommand'
      produces:
      - application/json
      responses:
        "201":
          description: Email sent confirmation
          schema:
            $ref: '#/definitions/resp.Result'
        "400":
          description: Validation error
          schema:
            $ref: '#/definitions/resp.Result'
        "404":
          description: Email not found
          schema:
            $ref: '#/definitions/resp.Result'
        "500":
          description: Internal server error
          schema:
            $ref: '#/definitions/resp.Result'
      security:
      - BearerAuth: []
      summary: Request verification or password reset
      tags:
      - customer
  /default-theme:
    delete:
      consumes:
      - application/json
      description: Deletes an existing default theme template
      parameters:
      - description: Theme ID to delete
        in: body
        name: request
        required: true
        schema:
          $ref: '#/definitions/defaulttheme.DeleteDefaultThemeCommand'
      produces:
      - application/json
      responses:
        "200":
          description: Deleted theme confirmation
          schema:
            $ref: '#/definitions/resp.Result'
        "400":
          description: Validation error
          schema:
            $ref: '#/definitions/resp.Result'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/resp.Result'
        "404":
          description: Theme not found
          schema:
            $ref: '#/definitions/resp.Result'
        "500":
          description: Internal server error
          schema:
            $ref: '#/definitions/resp.Result'
      security:
      - BearerAuth: []
      summary: Delete a default theme
      tags:
      - default-theme
    get:
      consumes:
      - application/json
      description: Retrieves a specific default theme template by its ID
      parameters:
      - description: Theme ID to retrieve
        in: body
        name: request
        required: true
        schema:
          $ref: '#/definitions/defaulttheme.GetByIdDefaultThemeQuery'
      produces:
      - application/json
      responses:
        "200":
          description: Theme details
          schema:
            $ref: '#/definitions/resp.Result'
        "400":
          description: Validation error
          schema:
            $ref: '#/definitions/resp.Result'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/resp.Result'
        "404":
          description: Theme not found
          schema:
            $ref: '#/definitions/resp.Result'
        "500":
          description: Internal server error
          schema:
            $ref: '#/definitions/resp.Result'
      security:
      - BearerAuth: []
      summary: Get default theme by ID
      tags:
      - default-theme
    post:
      consumes:
      - application/json
      description: Creates a new default theme template for websites
      parameters:
      - description: Theme information
        in: body
        name: request
        required: true
        schema:
          $ref: '#/definitions/defaulttheme.CreateDefaultThemeCommand'
      produces:
      - application/json
      responses:
        "201":
          description: Created theme
          schema:
            $ref: '#/definitions/resp.Result'
        "400":
          description: Validation error
          schema:
            $ref: '#/definitions/resp.Result'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/resp.Result'
        "500":
          description: Internal server error
          schema:
            $ref: '#/definitions/resp.Result'
      security:
      - BearerAuth: []
      summary: Create a new default theme
      tags:
      - default-theme
    put:
      consumes:
      - application/json
      description: Updates an existing default theme template
      parameters:
      - description: Updated theme information
        in: body
        name: request
        required: true
        schema:
          $ref: '#/definitions/defaulttheme.UpdateDefaultThemeCommand'
      produces:
      - application/json
      responses:
        "200":
          description: Updated theme
          schema:
            $ref: '#/definitions/resp.Result'
        "400":
          description: Validation error
          schema:
            $ref: '#/definitions/resp.Result'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/resp.Result'
        "404":
          description: Theme not found
          schema:
            $ref: '#/definitions/resp.Result'
        "500":
          description: Internal server error
          schema:
            $ref: '#/definitions/resp.Result'
      security:
      - BearerAuth: []
      summary: Update a default theme
      tags:
      - default-theme
  /default-theme/all:
    get:
      consumes:
      - application/json
      description: Retrieves all default theme templates
      parameters:
      - description: Query parameters
        in: body
        name: request
        required: true
        schema:
          $ref: '#/definitions/defaulttheme.GetAllDefaultThemeQuery'
      produces:
      - application/json
      responses:
        "200":
          description: List of themes
          schema:
            $ref: '#/definitions/resp.Result'
        "400":
          description: Validation error
          schema:
            $ref: '#/definitions/resp.Result'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/resp.Result'
        "500":
          description: Internal server error
          schema:
            $ref: '#/definitions/resp.Result'
      security:
      - BearerAuth: []
      summary: Get all default themes
      tags:
      - default-theme
  /discount:
    delete:
      consumes:
      - application/json
      description: Deletes an existing discount code or promotion
      parameters:
      - description: Discount ID to delete
        in: body
        name: request
        required: true
        schema:
          $ref: '#/definitions/discount.DeleteDiscountCommand'
      produces:
      - application/json
      responses:
        "200":
          description: Deleted discount confirmation
          schema:
            $ref: '#/definitions/resp.Result'
        "400":
          description: Validation error
          schema:
            $ref: '#/definitions/resp.Result'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/resp.Result'
        "404":
          description: Discount not found
          schema:
            $ref: '#/definitions/resp.Result'
        "500":
          description: Internal server error
          schema:
            $ref: '#/definitions/resp.Result'
      security:
      - BearerAuth: []
      summary: Delete a discount
      tags:
      - discount
    get:
      consumes:
      - application/json
      description: Retrieves a specific discount by its ID
      parameters:
      - description: Discount ID to retrieve
        in: body
        name: request
        required: true
        schema:
          $ref: '#/definitions/discount.GetByIdDiscountQuery'
      produces:
      - application/json
      responses:
        "200":
          description: Discount details
          schema:
            $ref: '#/definitions/resp.Result'
        "400":
          description: Validation error
          schema:
            $ref: '#/definitions/resp.Result'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/resp.Result'
        "404":
          description: Discount not found
          schema:
            $ref: '#/definitions/resp.Result'
        "500":
          description: Internal server error
          schema:
            $ref: '#/definitions/resp.Result'
      security:
      - BearerAuth: []
      summary: Get discount by ID
      tags:
      - discount
    post:
      consumes:
      - application/json
      description: Creates a new discount code or promotion
      parameters:
      - description: Discount information
        in: body
        name: request
        required: true
        schema:
          $ref: '#/definitions/discount.CreateDiscountCommand'
      produces:
      - application/json
      responses:
        "201":
          description: Created discount
          schema:
            $ref: '#/definitions/resp.Result'
        "400":
          description: Validation error
          schema:
            $ref: '#/definitions/resp.Result'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/resp.Result'
        "500":
          description: Internal server error
          schema:
            $ref: '#/definitions/resp.Result'
      security:
      - BearerAuth: []
      summary: Create a new discount
      tags:
      - discount
    put:
      consumes:
      - application/json
      description: Updates an existing discount code or promotion
      parameters:
      - description: Updated discount information
        in: body
        name: request
        required: true
        schema:
          $ref: '#/definitions/discount.UpdateDiscountCommand'
      produces:
      - application/json
      responses:
        "200":
          description: Updated discount
          schema:
            $ref: '#/definitions/resp.Result'
        "400":
          description: Validation error
          schema:
            $ref: '#/definitions/resp.Result'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/resp.Result'
        "404":
          description: Discount not found
          schema:
            $ref: '#/definitions/resp.Result'
        "500":
          description: Internal server error
          schema:
            $ref: '#/definitions/resp.Result'
      security:
      - BearerAuth: []
      summary: Update a discount
      tags:
      - discount
  /discount/admin/all:
    get:
      consumes:
      - application/json
      description: Admin endpoint to retrieve all discount codes and promotions with
        additional information
      parameters:
      - description: Query parameters
        in: body
        name: request
        required: true
        schema:
          $ref: '#/definitions/discount.AdminGetAllDiscountQuery'
      produces:
      - application/json
      responses:
        "200":
          description: List of all discounts
          schema:
            $ref: '#/definitions/resp.Result'
        "400":
          description: Validation error
          schema:
            $ref: '#/definitions/resp.Result'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/resp.Result'
        "403":
          description: Forbidden - Admin access required
          schema:
            $ref: '#/definitions/resp.Result'
        "500":
          description: Internal server error
          schema:
            $ref: '#/definitions/resp.Result'
      security:
      - BearerAuth: []
      summary: 'Admin: Get all discounts'
      tags:
      - discount
  /discount/all:
    get:
      consumes:
      - application/json
      description: Retrieves all discount codes and promotions
      parameters:
      - description: Query parameters
        in: body
        name: request
        required: true
        schema:
          $ref: '#/definitions/discount.GetAllDiscountQuery'
      produces:
      - application/json
      responses:
        "200":
          description: List of discounts
          schema:
            $ref: '#/definitions/resp.Result'
        "400":
          description: Validation error
          schema:
            $ref: '#/definitions/resp.Result'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/resp.Result'
        "500":
          description: Internal server error
          schema:
            $ref: '#/definitions/resp.Result'
      security:
      - BearerAuth: []
      summary: Get all discounts
      tags:
      - discount
  /file-item:
    delete:
      consumes:
      - application/json
      description: Soft deletes a file or directory (moves to trash)
      parameters:
      - description: File or directory ID to delete
        in: body
        name: request
        required: true
        schema:
          $ref: '#/definitions/fileitem.DeleteFileItemCommand'
      produces:
      - application/json
      responses:
        "200":
          description: Deleted file or directory confirmation
          schema:
            $ref: '#/definitions/resp.Result'
        "400":
          description: Validation error
          schema:
            $ref: '#/definitions/resp.Result'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/resp.Result'
        "404":
          description: File or directory not found
          schema:
            $ref: '#/definitions/resp.Result'
        "500":
          description: Internal server error
          schema:
            $ref: '#/definitions/resp.Result'
      security:
      - BearerAuth: []
      summary: Delete a file or directory
      tags:
      - file-item
    post:
      consumes:
      - application/json
      description: Creates a new file or directory in the file system
      parameters:
      - description: File or directory information
        in: body
        name: request
        required: true
        schema:
          $ref: '#/definitions/fileitem.CreateOrDirectoryItemCommand'
      produces:
      - application/json
      responses:
        "201":
          description: Created file or directory
          schema:
            $ref: '#/definitions/resp.Result'
        "400":
          description: Validation error
          schema:
            $ref: '#/definitions/resp.Result'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/resp.Result'
        "500":
          description: Internal server error
          schema:
            $ref: '#/definitions/resp.Result'
      security:
      - BearerAuth: []
      summary: Create file or directory
      tags:
      - file-item
    put:
      consumes:
      - application/json
      description: Updates an existing file or directory with new information
      parameters:
      - description: Updated file or directory information
        in: body
        name: request
        required: true
        schema:
          $ref: '#/definitions/fileitem.UpdateFileItemCommand'
      produces:
      - application/json
      responses:
        "200":
          description: Updated file or directory
          schema:
            $ref: '#/definitions/resp.Result'
        "400":
          description: Validation error
          schema:
            $ref: '#/definitions/resp.Result'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/resp.Result'
        "404":
          description: File or directory not found
          schema:
            $ref: '#/definitions/resp.Result'
        "500":
          description: Internal server error
          schema:
            $ref: '#/definitions/resp.Result'
      security:
      - BearerAuth: []
      summary: Update a file or directory
      tags:
      - file-item
  /file-item/download:
    get:
      consumes:
      - application/json
      description: Retrieves a file for download by its ID
      parameters:
      - description: File ID to download
        in: body
        name: request
        required: true
        schema:
          $ref: '#/definitions/fileitem.GetDownloadFileItemByIdQuery'
      produces:
      - application/json
      responses:
        "200":
          description: File download information
          schema:
            $ref: '#/definitions/resp.Result'
        "400":
          description: Validation error
          schema:
            $ref: '#/definitions/resp.Result'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/resp.Result'
        "404":
          description: File not found
          schema:
            $ref: '#/definitions/resp.Result'
        "500":
          description: Internal server error
          schema:
            $ref: '#/definitions/resp.Result'
      security:
      - BearerAuth: []
      summary: Download a file
      tags:
      - file-item
  /file-item/force:
    delete:
      consumes:
      - application/json
      description: Permanently deletes a file or directory from the system
      parameters:
      - description: File or directory ID to permanently delete
        in: body
        name: request
        required: true
        schema:
          $ref: '#/definitions/fileitem.ForceDeleteFileItemCommand'
      produces:
      - application/json
      responses:
        "200":
          description: Permanently deleted file or directory confirmation
          schema:
            $ref: '#/definitions/resp.Result'
        "400":
          description: Validation error
          schema:
            $ref: '#/definitions/resp.Result'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/resp.Result'
        "404":
          description: File or directory not found
          schema:
            $ref: '#/definitions/resp.Result'
        "500":
          description: Internal server error
          schema:
            $ref: '#/definitions/resp.Result'
      security:
      - BearerAuth: []
      summary: Permanently delete a file or directory
      tags:
      - file-item
  /file-item/ids:
    get:
      consumes:
      - application/json
      description: Retrieves multiple files or directories by their IDs
      parameters:
      - description: File or directory IDs to retrieve
        in: body
        name: request
        required: true
        schema:
          $ref: '#/definitions/fileitem.GetByIdsQuery'
      produces:
      - application/json
      responses:
        "200":
          description: Files or directories details
          schema:
            $ref: '#/definitions/resp.Result'
        "400":
          description: Validation error
          schema:
            $ref: '#/definitions/resp.Result'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/resp.Result'
        "404":
          description: One or more files or directories not found
          schema:
            $ref: '#/definitions/resp.Result'
        "500":
          description: Internal server error
          schema:
            $ref: '#/definitions/resp.Result'
      security:
      - BearerAuth: []
      summary: Get files or directories by IDs
      tags:
      - file-item
  /file-item/operation:
    post:
      consumes:
      - application/json
      description: Performs operations like copy, move, or rename on files and directories
      parameters:
      - description: Operation details
        in: body
        name: request
        required: true
        schema:
          $ref: '#/definitions/fileitem.FileOperationCommand'
      produces:
      - application/json
      responses:
        "200":
          description: Operation result
          schema:
            $ref: '#/definitions/resp.Result'
        "400":
          description: Validation error
          schema:
            $ref: '#/definitions/resp.Result'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/resp.Result'
        "404":
          description: File or directory not found
          schema:
            $ref: '#/definitions/resp.Result'
        "500":
          description: Internal server error
          schema:
            $ref: '#/definitions/resp.Result'
      security:
      - BearerAuth: []
      summary: Perform file operations
      tags:
      - file-item
  /file-item/restore:
    put:
      consumes:
      - application/json
      description: Restores a previously deleted file or directory from trash
      parameters:
      - description: File or directory ID to restore
        in: body
        name: request
        required: true
        schema:
          $ref: '#/definitions/fileitem.RestoreFileItemCommand'
      produces:
      - application/json
      responses:
        "200":
          description: Restored file or directory
          schema:
            $ref: '#/definitions/resp.Result'
        "400":
          description: Validation error
          schema:
            $ref: '#/definitions/resp.Result'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/resp.Result'
        "404":
          description: File or directory not found in trash
          schema:
            $ref: '#/definitions/resp.Result'
        "500":
          description: Internal server error
          schema:
            $ref: '#/definitions/resp.Result'
      security:
      - BearerAuth: []
      summary: Restore deleted file or directory
      tags:
      - file-item
  /file-item/tree:
    get:
      consumes:
      - application/json
      description: Retrieves the tree structure of files and directories
      parameters:
      - description: Query parameters
        in: body
        name: request
        required: true
        schema:
          $ref: '#/definitions/fileitem.GetTreeDirectoryQuery'
      produces:
      - application/json
      responses:
        "200":
          description: Directory tree
          schema:
            $ref: '#/definitions/resp.Result'
        "400":
          description: Validation error
          schema:
            $ref: '#/definitions/resp.Result'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/resp.Result'
        "500":
          description: Internal server error
          schema:
            $ref: '#/definitions/resp.Result'
      security:
      - BearerAuth: []
      summary: Get directory tree
      tags:
      - file-item
  /file-item/tree/deleted:
    get:
      consumes:
      - application/json
      description: Retrieves the tree structure of deleted files and directories
      parameters:
      - description: Query parameters
        in: body
        name: request
        required: true
        schema:
          $ref: '#/definitions/fileitem.GetDeletedTreeDirectoryQuery'
      produces:
      - application/json
      responses:
        "200":
          description: Deleted directory tree
          schema:
            $ref: '#/definitions/resp.Result'
        "400":
          description: Validation error
          schema:
            $ref: '#/definitions/resp.Result'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/resp.Result'
        "500":
          description: Internal server error
          schema:
            $ref: '#/definitions/resp.Result'
      security:
      - BearerAuth: []
      summary: Get deleted directory tree
      tags:
      - file-item
  /gateway:
    get:
      consumes:
      - application/json
      description: Retrieves a specific payment gateway by its ID
      parameters:
      - description: Gateway ID to retrieve
        in: body
        name: request
        required: true
        schema:
          $ref: '#/definitions/payment.GetByIdGatewayQuery'
      produces:
      - application/json
      responses:
        "200":
          description: Gateway details
          schema:
            $ref: '#/definitions/resp.Result'
        "400":
          description: Validation error
          schema:
            $ref: '#/definitions/resp.Result'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/resp.Result'
        "404":
          description: Gateway not found
          schema:
            $ref: '#/definitions/resp.Result'
        "500":
          description: Internal server error
          schema:
            $ref: '#/definitions/resp.Result'
      security:
      - BearerAuth: []
      summary: Get payment gateway by ID
      tags:
      - gateway
    post:
      consumes:
      - application/json
      description: Creates a new payment gateway or updates an existing one
      parameters:
      - description: Gateway information
        in: body
        name: request
        required: true
        schema:
          $ref: '#/definitions/payment.CreateOrUpdateGatewayCommand'
      produces:
      - application/json
      responses:
        "200":
          description: Created or updated gateway
          schema:
            $ref: '#/definitions/resp.Result'
        "400":
          description: Validation error
          schema:
            $ref: '#/definitions/resp.Result'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/resp.Result'
        "500":
          description: Internal server error
          schema:
            $ref: '#/definitions/resp.Result'
      security:
      - BearerAuth: []
      summary: Create or update payment gateway
      tags:
      - gateway
  /gateway/admin/all:
    get:
      consumes:
      - application/json
      description: Admin endpoint to retrieve all payment gateways
      parameters:
      - description: Query parameters
        in: body
        name: request
        required: true
        schema:
          $ref: '#/definitions/payment.AdminGetAllGatewayQuery'
      produces:
      - application/json
      responses:
        "200":
          description: List of all gateways
          schema:
            $ref: '#/definitions/resp.Result'
        "400":
          description: Validation error
          schema:
            $ref: '#/definitions/resp.Result'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/resp.Result'
        "403":
          description: Forbidden - Admin access required
          schema:
            $ref: '#/definitions/resp.Result'
        "500":
          description: Internal server error
          schema:
            $ref: '#/definitions/resp.Result'
      security:
      - BearerAuth: []
      summary: 'Admin: Get all payment gateways'
      tags:
      - gateway
  /header-footer:
    delete:
      consumes:
      - application/json
      description: Deletes an existing header and footer template
      parameters:
      - description: Header/footer ID to delete
        in: body
        name: request
        required: true
        schema:
          $ref: '#/definitions/header_footer.DeleteHeaderFooterCommand'
      produces:
      - application/json
      responses:
        "200":
          description: Deleted header/footer confirmation
          schema:
            $ref: '#/definitions/resp.Result'
        "400":
          description: Validation error
          schema:
            $ref: '#/definitions/resp.Result'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/resp.Result'
        "404":
          description: Header/footer not found
          schema:
            $ref: '#/definitions/resp.Result'
        "500":
          description: Internal server error
          schema:
            $ref: '#/definitions/resp.Result'
      security:
      - BearerAuth: []
      summary: Delete a header/footer
      tags:
      - header-footer
    get:
      consumes:
      - application/json
      description: Retrieves a specific header and footer template by its ID
      parameters:
      - description: Header/footer ID to retrieve
        in: body
        name: request
        required: true
        schema:
          $ref: '#/definitions/header_footer.GetByIdHeaderFooterQuery'
      produces:
      - application/json
      responses:
        "200":
          description: Header/footer details
          schema:
            $ref: '#/definitions/resp.Result'
        "400":
          description: Validation error
          schema:
            $ref: '#/definitions/resp.Result'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/resp.Result'
        "404":
          description: Header/footer not found
          schema:
            $ref: '#/definitions/resp.Result'
        "500":
          description: Internal server error
          schema:
            $ref: '#/definitions/resp.Result'
      security:
      - BearerAuth: []
      summary: Get header/footer by ID
      tags:
      - header-footer
    post:
      consumes:
      - application/json
      description: Creates a new header and footer template for websites
      parameters:
      - description: Header/footer information
        in: body
        name: request
        required: true
        schema:
          $ref: '#/definitions/header_footer.CreateHeaderFooterCommand'
      produces:
      - application/json
      responses:
        "201":
          description: Created header/footer
          schema:
            $ref: '#/definitions/resp.Result'
        "400":
          description: Validation error
          schema:
            $ref: '#/definitions/resp.Result'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/resp.Result'
        "500":
          description: Internal server error
          schema:
            $ref: '#/definitions/resp.Result'
      security:
      - BearerAuth: []
      summary: Create a header/footer
      tags:
      - header-footer
    put:
      consumes:
      - application/json
      description: Updates an existing header and footer template
      parameters:
      - description: Updated header/footer information
        in: body
        name: request
        required: true
        schema:
          $ref: '#/definitions/header_footer.UpdateHeaderFooterCommand'
      produces:
      - application/json
      responses:
        "200":
          description: Updated header/footer
          schema:
            $ref: '#/definitions/resp.Result'
        "400":
          description: Validation error
          schema:
            $ref: '#/definitions/resp.Result'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/resp.Result'
        "404":
          description: Header/footer not found
          schema:
            $ref: '#/definitions/resp.Result'
        "500":
          description: Internal server error
          schema:
            $ref: '#/definitions/resp.Result'
      security:
      - BearerAuth: []
      summary: Update a header/footer
      tags:
      - header-footer
  /header-footer/admin/all:
    get:
      consumes:
      - application/json
      description: Admin endpoint to retrieve all header and footer templates with
        additional information
      parameters:
      - description: Query parameters
        in: body
        name: request
        required: true
        schema:
          $ref: '#/definitions/header_footer.AdminGetAllHeaderFooterQuery'
      produces:
      - application/json
      responses:
        "200":
          description: List of all header/footers
          schema:
            $ref: '#/definitions/resp.Result'
        "400":
          description: Validation error
          schema:
            $ref: '#/definitions/resp.Result'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/resp.Result'
        "403":
          description: Forbidden - Admin access required
          schema:
            $ref: '#/definitions/resp.Result'
        "500":
          description: Internal server error
          schema:
            $ref: '#/definitions/resp.Result'
      security:
      - BearerAuth: []
      summary: 'Admin: Get all header/footers'
      tags:
      - header-footer
  /header-footer/all:
    get:
      consumes:
      - application/json
      description: Retrieves all header and footer templates
      parameters:
      - description: Query parameters
        in: body
        name: request
        required: true
        schema:
          $ref: '#/definitions/header_footer.GetAllHeaderFooterQuery'
      produces:
      - application/json
      responses:
        "200":
          description: List of header/footers
          schema:
            $ref: '#/definitions/resp.Result'
        "400":
          description: Validation error
          schema:
            $ref: '#/definitions/resp.Result'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/resp.Result'
        "500":
          description: Internal server error
          schema:
            $ref: '#/definitions/resp.Result'
      security:
      - BearerAuth: []
      summary: Get all header/footers
      tags:
      - header-footer
  /order:
    post:
      consumes:
      - application/json
      description: Creates a new order request from the user's basket
      parameters:
      - description: Order request information
        in: body
        name: request
        required: true
        schema:
          $ref: '#/definitions/order.CreateOrderRequestCommand'
      produces:
      - application/json
      responses:
        "201":
          description: Created order request
          schema:
            $ref: '#/definitions/resp.Result'
        "400":
          description: Validation error
          schema:
            $ref: '#/definitions/resp.Result'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/resp.Result'
        "500":
          description: Internal server error
          schema:
            $ref: '#/definitions/resp.Result'
      security:
      - BearerAuth: []
      summary: Create an order request
      tags:
      - order
  /order/admin/all:
    get:
      consumes:
      - application/json
      description: Admin endpoint to retrieve all orders across all users
      parameters:
      - description: Query parameters
        in: body
        name: request
        required: true
        schema:
          $ref: '#/definitions/order.AdminGetAllOrderUserQuery'
      produces:
      - application/json
      responses:
        "200":
          description: List of all orders
          schema:
            $ref: '#/definitions/resp.Result'
        "400":
          description: Validation error
          schema:
            $ref: '#/definitions/resp.Result'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/resp.Result'
        "403":
          description: Forbidden - Admin access required
          schema:
            $ref: '#/definitions/resp.Result'
        "500":
          description: Internal server error
          schema:
            $ref: '#/definitions/resp.Result'
      security:
      - BearerAuth: []
      summary: 'Admin: Get all orders'
      tags:
      - order
  /order/customer/all:
    get:
      consumes:
      - application/json
      description: Retrieves all orders for the authenticated customer
      parameters:
      - description: Query parameters
        in: body
        name: request
        required: true
        schema:
          $ref: '#/definitions/order.GetAllOrderCustomerQuery'
      produces:
      - application/json
      responses:
        "200":
          description: List of customer orders
          schema:
            $ref: '#/definitions/resp.Result'
        "400":
          description: Validation error
          schema:
            $ref: '#/definitions/resp.Result'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/resp.Result'
        "500":
          description: Internal server error
          schema:
            $ref: '#/definitions/resp.Result'
      security:
      - BearerAuth: []
      summary: Get all customer orders
      tags:
      - order
  /order/customer/details:
    get:
      consumes:
      - application/json
      description: Retrieves detailed information about a specific customer order
      parameters:
      - description: Order ID to retrieve
        in: body
        name: request
        required: true
        schema:
          $ref: '#/definitions/order.GetOrderCustomerDetailsQuery'
      produces:
      - application/json
      responses:
        "200":
          description: Order details
          schema:
            $ref: '#/definitions/resp.Result'
        "400":
          description: Validation error
          schema:
            $ref: '#/definitions/resp.Result'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/resp.Result'
        "404":
          description: Order not found
          schema:
            $ref: '#/definitions/resp.Result'
        "500":
          description: Internal server error
          schema:
            $ref: '#/definitions/resp.Result'
      security:
      - BearerAuth: []
      summary: Get customer order details
      tags:
      - order
  /order/user/all:
    get:
      consumes:
      - application/json
      description: Retrieves all orders for the authenticated user (seller)
      parameters:
      - description: Query parameters
        in: body
        name: request
        required: true
        schema:
          $ref: '#/definitions/order.GetAllOrderUserQuery'
      produces:
      - application/json
      responses:
        "200":
          description: List of user orders
          schema:
            $ref: '#/definitions/resp.Result'
        "400":
          description: Validation error
          schema:
            $ref: '#/definitions/resp.Result'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/resp.Result'
        "500":
          description: Internal server error
          schema:
            $ref: '#/definitions/resp.Result'
      security:
      - BearerAuth: []
      summary: Get all user orders
      tags:
      - order
  /order/user/details:
    get:
      consumes:
      - application/json
      description: Retrieves detailed information about a specific user (seller) order
      parameters:
      - description: Order ID to retrieve
        in: body
        name: request
        required: true
        schema:
          $ref: '#/definitions/order.GetOrderUserDetailsQuery'
      produces:
      - application/json
      responses:
        "200":
          description: Order details
          schema:
            $ref: '#/definitions/resp.Result'
        "400":
          description: Validation error
          schema:
            $ref: '#/definitions/resp.Result'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/resp.Result'
        "404":
          description: Order not found
          schema:
            $ref: '#/definitions/resp.Result'
        "500":
          description: Internal server error
          schema:
            $ref: '#/definitions/resp.Result'
      security:
      - BearerAuth: []
      summary: Get user order details
      tags:
      - order
  /order/verify:
    post:
      consumes:
      - application/json
      description: Verifies and finalizes an order after payment
      parameters:
      - description: Order verification information
        in: body
        name: request
        required: true
        schema:
          $ref: '#/definitions/order.CreateOrderVerifyCommand'
      produces:
      - application/json
      responses:
        "200":
          description: Verified order
          schema:
            $ref: '#/definitions/resp.Result'
        "400":
          description: Validation error
          schema:
            $ref: '#/definitions/resp.Result'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/resp.Result'
        "404":
          description: Order not found
          schema:
            $ref: '#/definitions/resp.Result'
        "500":
          description: Internal server error
          schema:
            $ref: '#/definitions/resp.Result'
      security:
      - BearerAuth: []
      summary: Verify an order
      tags:
      - order
  /page:
    delete:
      consumes:
      - application/json
      description: Deletes an existing web page
      parameters:
      - description: Page ID to delete
        in: body
        name: request
        required: true
        schema:
          $ref: '#/definitions/page.DeletePageCommand'
      produces:
      - application/json
      responses:
        "200":
          description: Deleted page confirmation
          schema:
            $ref: '#/definitions/resp.Result'
        "400":
          description: Validation error
          schema:
            $ref: '#/definitions/resp.Result'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/resp.Result'
        "404":
          description: Page not found
          schema:
            $ref: '#/definitions/resp.Result'
        "500":
          description: Internal server error
          schema:
            $ref: '#/definitions/resp.Result'
      security:
      - BearerAuth: []
      summary: Delete a page
      tags:
      - page
    get:
      consumes:
      - application/json
      description: Retrieves a specific web page by its ID
      parameters:
      - description: Page ID to retrieve
        in: body
        name: request
        required: true
        schema:
          $ref: '#/definitions/page.GetByIdPageQuery'
      produces:
      - application/json
      responses:
        "200":
          description: Page details
          schema:
            $ref: '#/definitions/resp.Result'
        "400":
          description: Validation error
          schema:
            $ref: '#/definitions/resp.Result'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/resp.Result'
        "404":
          description: Page not found
          schema:
            $ref: '#/definitions/resp.Result'
        "500":
          description: Internal server error
          schema:
            $ref: '#/definitions/resp.Result'
      security:
      - BearerAuth: []
      summary: Get page by ID
      tags:
      - page
    post:
      consumes:
      - application/json
      description: Creates a new web page for a website
      parameters:
      - description: Page information
        in: body
        name: request
        required: true
        schema:
          $ref: '#/definitions/page.CreatePageCommand'
      produces:
      - application/json
      responses:
        "201":
          description: Created page
          schema:
            $ref: '#/definitions/resp.Result'
        "400":
          description: Validation error
          schema:
            $ref: '#/definitions/resp.Result'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/resp.Result'
        "500":
          description: Internal server error
          schema:
            $ref: '#/definitions/resp.Result'
      security:
      - BearerAuth: []
      summary: Create a new page
      tags:
      - page
    put:
      consumes:
      - application/json
      description: Updates an existing web page with new content and settings
      parameters:
      - description: Updated page information
        in: body
        name: request
        required: true
        schema:
          $ref: '#/definitions/page.UpdatePageCommand'
      produces:
      - application/json
      responses:
        "200":
          description: Updated page
          schema:
            $ref: '#/definitions/resp.Result'
        "400":
          description: Validation error
          schema:
            $ref: '#/definitions/resp.Result'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/resp.Result'
        "404":
          description: Page not found
          schema:
            $ref: '#/definitions/resp.Result'
        "500":
          description: Internal server error
          schema:
            $ref: '#/definitions/resp.Result'
      security:
      - BearerAuth: []
      summary: Update a page
      tags:
      - page
  /page/admin/all:
    get:
      consumes:
      - application/json
      description: Admin endpoint to retrieve all web pages across all websites
      parameters:
      - description: Query parameters
        in: body
        name: request
        required: true
        schema:
          $ref: '#/definitions/page.AdminGetAllPageQuery'
      produces:
      - application/json
      responses:
        "200":
          description: List of all pages
          schema:
            $ref: '#/definitions/resp.Result'
        "400":
          description: Validation error
          schema:
            $ref: '#/definitions/resp.Result'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/resp.Result'
        "403":
          description: Forbidden - Admin access required
          schema:
            $ref: '#/definitions/resp.Result'
        "500":
          description: Internal server error
          schema:
            $ref: '#/definitions/resp.Result'
      security:
      - BearerAuth: []
      summary: 'Admin: Get all pages'
      tags:
      - page
  /page/all:
    get:
      consumes:
      - application/json
      description: Retrieves all web pages for the authenticated user
      parameters:
      - description: Query parameters
        in: body
        name: request
        required: true
        schema:
          $ref: '#/definitions/page.GetAllPageQuery'
      produces:
      - application/json
      responses:
        "200":
          description: List of pages
          schema:
            $ref: '#/definitions/resp.Result'
        "400":
          description: Validation error
          schema:
            $ref: '#/definitions/resp.Result'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/resp.Result'
        "500":
          description: Internal server error
          schema:
            $ref: '#/definitions/resp.Result'
      security:
      - BearerAuth: []
      summary: Get all pages
      tags:
      - page
  /payment/admin/all:
    get:
      consumes:
      - application/json
      description: Admin endpoint to retrieve all payment transactions
      parameters:
      - description: Query parameters
        in: body
        name: request
        required: true
        schema:
          $ref: '#/definitions/payment.AdminGetAllPaymentQuery'
      produces:
      - application/json
      responses:
        "200":
          description: List of all payments
          schema:
            $ref: '#/definitions/resp.Result'
        "400":
          description: Validation error
          schema:
            $ref: '#/definitions/resp.Result'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/resp.Result'
        "403":
          description: Forbidden - Admin access required
          schema:
            $ref: '#/definitions/resp.Result'
        "500":
          description: Internal server error
          schema:
            $ref: '#/definitions/resp.Result'
      security:
      - BearerAuth: []
      summary: 'Admin: Get all payments'
      tags:
      - payment
  /payment/request:
    post:
      consumes:
      - application/json
      description: Initiates a payment request to a payment gateway
      parameters:
      - description: Payment request information
        in: body
        name: request
        required: true
        schema:
          $ref: '#/definitions/payment.RequestGatewayCommand'
      produces:
      - application/json
      responses:
        "200":
          description: Payment gateway request result
          schema:
            $ref: '#/definitions/resp.Result'
        "400":
          description: Validation error
          schema:
            $ref: '#/definitions/resp.Result'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/resp.Result'
        "500":
          description: Internal server error
          schema:
            $ref: '#/definitions/resp.Result'
      security:
      - BearerAuth: []
      summary: Request payment gateway
      tags:
      - payment
  /payment/verify:
    post:
      consumes:
      - application/json
      description: Verifies a payment transaction after it's processed by the payment
        gateway
      parameters:
      - description: Payment verification information
        in: body
        name: request
        required: true
        schema:
          $ref: '#/definitions/payment.VerifyPaymentCommand'
      produces:
      - application/json
      responses:
        "200":
          description: Verified payment
          schema:
            $ref: '#/definitions/resp.Result'
        "400":
          description: Validation error
          schema:
            $ref: '#/definitions/resp.Result'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/resp.Result'
        "404":
          description: Payment not found
          schema:
            $ref: '#/definitions/resp.Result'
        "500":
          description: Internal server error
          schema:
            $ref: '#/definitions/resp.Result'
      security:
      - BearerAuth: []
      summary: Verify payment
      tags:
      - payment
  /plan:
    delete:
      consumes:
      - application/json
      description: Deletes an existing subscription plan
      parameters:
      - description: Plan ID to delete
        in: body
        name: request
        required: true
        schema:
          $ref: '#/definitions/plan.DeletePlanCommand'
      produces:
      - application/json
      responses:
        "200":
          description: Deleted plan confirmation
          schema:
            $ref: '#/definitions/resp.Result'
        "400":
          description: Validation error
          schema:
            $ref: '#/definitions/resp.Result'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/resp.Result'
        "404":
          description: Plan not found
          schema:
            $ref: '#/definitions/resp.Result'
        "500":
          description: Internal server error
          schema:
            $ref: '#/definitions/resp.Result'
      security:
      - BearerAuth: []
      summary: Delete a subscription plan
      tags:
      - plan
    get:
      consumes:
      - application/json
      description: Retrieves a specific subscription plan by its ID
      parameters:
      - description: Plan ID to retrieve
        in: body
        name: request
        required: true
        schema:
          $ref: '#/definitions/plan.GetByIDPlanQuery'
      produces:
      - application/json
      responses:
        "200":
          description: Plan details
          schema:
            $ref: '#/definitions/resp.Result'
        "400":
          description: Validation error
          schema:
            $ref: '#/definitions/resp.Result'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/resp.Result'
        "404":
          description: Plan not found
          schema:
            $ref: '#/definitions/resp.Result'
        "500":
          description: Internal server error
          schema:
            $ref: '#/definitions/resp.Result'
      security:
      - BearerAuth: []
      summary: Get plan by ID
      tags:
      - plan
    post:
      consumes:
      - application/json
      description: Creates a new subscription plan with specified features and pricing
      parameters:
      - description: Plan information
        in: body
        name: request
        required: true
        schema:
          $ref: '#/definitions/plan.CreatePlanCommand'
      produces:
      - application/json
      responses:
        "201":
          description: Created plan
          schema:
            $ref: '#/definitions/resp.Result'
        "400":
          description: Validation error
          schema:
            $ref: '#/definitions/resp.Result'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/resp.Result'
        "500":
          description: Internal server error
          schema:
            $ref: '#/definitions/resp.Result'
      security:
      - BearerAuth: []
      summary: Create a new subscription plan
      tags:
      - plan
    put:
      consumes:
      - application/json
      description: Updates an existing subscription plan with new features and pricing
      parameters:
      - description: Updated plan information
        in: body
        name: request
        required: true
        schema:
          $ref: '#/definitions/plan.UpdatePlanCommand'
      produces:
      - application/json
      responses:
        "200":
          description: Updated plan
          schema:
            $ref: '#/definitions/resp.Result'
        "400":
          description: Validation error
          schema:
            $ref: '#/definitions/resp.Result'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/resp.Result'
        "404":
          description: Plan not found
          schema:
            $ref: '#/definitions/resp.Result'
        "500":
          description: Internal server error
          schema:
            $ref: '#/definitions/resp.Result'
      security:
      - BearerAuth: []
      summary: Update a subscription plan
      tags:
      - plan
  /plan/all:
    get:
      consumes:
      - application/json
      description: Retrieves all available subscription plans
      parameters:
      - description: Query parameters
        in: body
        name: request
        required: true
        schema:
          $ref: '#/definitions/plan.GetAllPlanQuery'
      produces:
      - application/json
      responses:
        "200":
          description: List of plans
          schema:
            $ref: '#/definitions/resp.Result'
        "400":
          description: Validation error
          schema:
            $ref: '#/definitions/resp.Result'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/resp.Result'
        "500":
          description: Internal server error
          schema:
            $ref: '#/definitions/resp.Result'
      security:
      - BearerAuth: []
      summary: Get all subscription plans
      tags:
      - plan
  /plan/calculate:
    get:
      consumes:
      - application/json
      description: Calculates the price for a subscription plan based on selected
        options
      parameters:
      - description: Plan calculation parameters
        in: body
        name: request
        required: true
        schema:
          $ref: '#/definitions/plan.CalculatePlanPriceQuery'
      produces:
      - application/json
      responses:
        "200":
          description: Calculated plan price
          schema:
            $ref: '#/definitions/resp.Result'
        "400":
          description: Validation error
          schema:
            $ref: '#/definitions/resp.Result'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/resp.Result'
        "500":
          description: Internal server error
          schema:
            $ref: '#/definitions/resp.Result'
      security:
      - BearerAuth: []
      summary: Calculate plan price
      tags:
      - plan
  /product:
    delete:
      consumes:
      - application/json
      description: Deletes an existing product by its ID
      parameters:
      - description: Product ID to delete
        in: body
        name: request
        required: true
        schema:
          $ref: '#/definitions/product.DeleteProductCommand'
      produces:
      - application/json
      responses:
        "200":
          description: Deleted product confirmation
          schema:
            $ref: '#/definitions/resp.Result'
        "400":
          description: Validation error
          schema:
            $ref: '#/definitions/resp.Result'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/resp.Result'
        "404":
          description: Product not found
          schema:
            $ref: '#/definitions/resp.Result'
        "500":
          description: Internal server error
          schema:
            $ref: '#/definitions/resp.Result'
      security:
      - BearerAuth: []
      summary: Delete a product
      tags:
      - product
    get:
      consumes:
      - application/json
      description: Retrieves a specific product by its ID
      parameters:
      - description: Product ID to retrieve
        in: body
        name: request
        required: true
        schema:
          $ref: '#/definitions/product.GetByIdProductQuery'
      produces:
      - application/json
      responses:
        "200":
          description: Product details
          schema:
            $ref: '#/definitions/resp.Result'
        "400":
          description: Validation error
          schema:
            $ref: '#/definitions/resp.Result'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/resp.Result'
        "404":
          description: Product not found
          schema:
            $ref: '#/definitions/resp.Result'
        "500":
          description: Internal server error
          schema:
            $ref: '#/definitions/resp.Result'
      security:
      - BearerAuth: []
      summary: Get product by ID
      tags:
      - product
    post:
      consumes:
      - application/json
      description: Creates a new product with the provided information
      parameters:
      - description: Product information
        in: body
        name: request
        required: true
        schema:
          $ref: '#/definitions/product.CreateProductCommand'
      produces:
      - application/json
      responses:
        "201":
          description: Created product
          schema:
            $ref: '#/definitions/resp.Result'
        "400":
          description: Validation error
          schema:
            $ref: '#/definitions/resp.Result'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/resp.Result'
        "500":
          description: Internal server error
          schema:
            $ref: '#/definitions/resp.Result'
      security:
      - BearerAuth: []
      summary: Create a new product
      tags:
      - product
    put:
      consumes:
      - application/json
      description: Updates an existing product with the provided information
      parameters:
      - description: Updated product information
        in: body
        name: request
        required: true
        schema:
          $ref: '#/definitions/product.UpdateProductCommand'
      produces:
      - application/json
      responses:
        "200":
          description: Updated product
          schema:
            $ref: '#/definitions/resp.Result'
        "400":
          description: Validation error
          schema:
            $ref: '#/definitions/resp.Result'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/resp.Result'
        "404":
          description: Product not found
          schema:
            $ref: '#/definitions/resp.Result'
        "500":
          description: Internal server error
          schema:
            $ref: '#/definitions/resp.Result'
      security:
      - BearerAuth: []
      summary: Update a product
      tags:
      - product
  /product-category:
    delete:
      consumes:
      - application/json
      description: Deletes an existing product category by its ID
      parameters:
      - description: Category ID to delete
        in: body
        name: request
        required: true
        schema:
          $ref: '#/definitions/product_category.DeleteCategoryCommand'
      produces:
      - application/json
      responses:
        "200":
          description: Deleted category confirmation
          schema:
            $ref: '#/definitions/resp.Result'
        "400":
          description: Validation error
          schema:
            $ref: '#/definitions/resp.Result'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/resp.Result'
        "404":
          description: Category not found
          schema:
            $ref: '#/definitions/resp.Result'
        "500":
          description: Internal server error
          schema:
            $ref: '#/definitions/resp.Result'
      security:
      - BearerAuth: []
      summary: Delete a product category
      tags:
      - product-category
    get:
      consumes:
      - application/json
      description: Retrieves a specific product category by its ID
      parameters:
      - description: Category ID to retrieve
        in: body
        name: request
        required: true
        schema:
          $ref: '#/definitions/product_category.GetByIdCategoryQuery'
      produces:
      - application/json
      responses:
        "200":
          description: Category details
          schema:
            $ref: '#/definitions/resp.Result'
        "400":
          description: Validation error
          schema:
            $ref: '#/definitions/resp.Result'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/resp.Result'
        "404":
          description: Category not found
          schema:
            $ref: '#/definitions/resp.Result'
        "500":
          description: Internal server error
          schema:
            $ref: '#/definitions/resp.Result'
      security:
      - BearerAuth: []
      summary: Get product category by ID
      tags:
      - product-category
    post:
      consumes:
      - application/json
      description: Creates a new category for products with the provided information
      parameters:
      - description: Category information
        in: body
        name: request
        required: true
        schema:
          $ref: '#/definitions/product_category.CreateCategoryCommand'
      produces:
      - application/json
      responses:
        "201":
          description: Created category
          schema:
            $ref: '#/definitions/resp.Result'
        "400":
          description: Validation error
          schema:
            $ref: '#/definitions/resp.Result'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/resp.Result'
        "500":
          description: Internal server error
          schema:
            $ref: '#/definitions/resp.Result'
      security:
      - BearerAuth: []
      summary: Create a new product category
      tags:
      - product-category
    put:
      consumes:
      - application/json
      description: Updates an existing product category with the provided information
      parameters:
      - description: Updated category information
        in: body
        name: request
        required: true
        schema:
          $ref: '#/definitions/product_category.UpdateCategoryCommand'
      produces:
      - application/json
      responses:
        "200":
          description: Updated category
          schema:
            $ref: '#/definitions/resp.Result'
        "400":
          description: Validation error
          schema:
            $ref: '#/definitions/resp.Result'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/resp.Result'
        "404":
          description: Category not found
          schema:
            $ref: '#/definitions/resp.Result'
        "500":
          description: Internal server error
          schema:
            $ref: '#/definitions/resp.Result'
      security:
      - BearerAuth: []
      summary: Update a product category
      tags:
      - product-category
  /product-category/admin/all:
    get:
      consumes:
      - application/json
      description: Admin endpoint to retrieve all product categories with additional
        information
      parameters:
      - description: Query parameters
        in: body
        name: request
        required: true
        schema:
          $ref: '#/definitions/product_category.AdminGetAllCategoryQuery'
      produces:
      - application/json
      responses:
        "200":
          description: List of all categories
          schema:
            $ref: '#/definitions/resp.Result'
        "400":
          description: Validation error
          schema:
            $ref: '#/definitions/resp.Result'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/resp.Result'
        "403":
          description: Forbidden - Admin access required
          schema:
            $ref: '#/definitions/resp.Result'
        "500":
          description: Internal server error
          schema:
            $ref: '#/definitions/resp.Result'
      security:
      - BearerAuth: []
      summary: 'Admin: Get all product categories'
      tags:
      - product-category
  /product-category/all:
    get:
      consumes:
      - application/json
      description: Retrieves all product categories with optional filtering
      parameters:
      - description: Query parameters
        in: body
        name: request
        required: true
        schema:
          $ref: '#/definitions/product_category.GetAllCategoryQuery'
      produces:
      - application/json
      responses:
        "200":
          description: List of categories
          schema:
            $ref: '#/definitions/resp.Result'
        "400":
          description: Validation error
          schema:
            $ref: '#/definitions/resp.Result'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/resp.Result'
        "500":
          description: Internal server error
          schema:
            $ref: '#/definitions/resp.Result'
      security:
      - BearerAuth: []
      summary: Get all product categories
      tags:
      - product-category
  /product-review:
    delete:
      consumes:
      - application/json
      description: Deletes an existing product review
      parameters:
      - description: Review ID to delete
        in: body
        name: request
        required: true
        schema:
          $ref: '#/definitions/product_review.DeleteProductReviewCommand'
      produces:
      - application/json
      responses:
        "200":
          description: Deleted review confirmation
          schema:
            $ref: '#/definitions/resp.Result'
        "400":
          description: Validation error
          schema:
            $ref: '#/definitions/resp.Result'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/resp.Result'
        "404":
          description: Review not found
          schema:
            $ref: '#/definitions/resp.Result'
        "500":
          description: Internal server error
          schema:
            $ref: '#/definitions/resp.Result'
      security:
      - BearerAuth: []
      summary: Delete a product review
      tags:
      - product-review
    get:
      consumes:
      - application/json
      description: Retrieves a specific product review by its ID
      parameters:
      - description: Review ID to retrieve
        in: body
        name: request
        required: true
        schema:
          $ref: '#/definitions/product_review.GetByIdProductReviewQuery'
      produces:
      - application/json
      responses:
        "200":
          description: Review details
          schema:
            $ref: '#/definitions/resp.Result'
        "400":
          description: Validation error
          schema:
            $ref: '#/definitions/resp.Result'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/resp.Result'
        "404":
          description: Review not found
          schema:
            $ref: '#/definitions/resp.Result'
        "500":
          description: Internal server error
          schema:
            $ref: '#/definitions/resp.Result'
      security:
      - BearerAuth: []
      summary: Get product review by ID
      tags:
      - product-review
    post:
      consumes:
      - application/json
      description: Creates a new review for a product
      parameters:
      - description: Review information
        in: body
        name: request
        required: true
        schema:
          $ref: '#/definitions/product_review.CreateProductReviewCommand'
      produces:
      - application/json
      responses:
        "201":
          description: Created review
          schema:
            $ref: '#/definitions/resp.Result'
        "400":
          description: Validation error
          schema:
            $ref: '#/definitions/resp.Result'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/resp.Result'
        "500":
          description: Internal server error
          schema:
            $ref: '#/definitions/resp.Result'
      security:
      - BearerAuth: []
      summary: Create a product review
      tags:
      - product-review
    put:
      consumes:
      - application/json
      description: Updates an existing product review
      parameters:
      - description: Updated review information
        in: body
        name: request
        required: true
        schema:
          $ref: '#/definitions/product_review.UpdateProductReviewCommand'
      produces:
      - application/json
      responses:
        "200":
          description: Updated review
          schema:
            $ref: '#/definitions/resp.Result'
        "400":
          description: Validation error
          schema:
            $ref: '#/definitions/resp.Result'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/resp.Result'
        "404":
          description: Review not found
          schema:
            $ref: '#/definitions/resp.Result'
        "500":
          description: Internal server error
          schema:
            $ref: '#/definitions/resp.Result'
      security:
      - BearerAuth: []
      summary: Update a product review
      tags:
      - product-review
  /product-review/admin/all:
    get:
      consumes:
      - application/json
      description: Admin endpoint to retrieve all product reviews with additional
        information
      parameters:
      - description: Query parameters
        in: body
        name: request
        required: true
        schema:
          $ref: '#/definitions/product_review.AdminGetAllProductReviewQuery'
      produces:
      - application/json
      responses:
        "200":
          description: List of all reviews
          schema:
            $ref: '#/definitions/resp.Result'
        "400":
          description: Validation error
          schema:
            $ref: '#/definitions/resp.Result'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/resp.Result'
        "403":
          description: Forbidden - Admin access required
          schema:
            $ref: '#/definitions/resp.Result'
        "500":
          description: Internal server error
          schema:
            $ref: '#/definitions/resp.Result'
      security:
      - BearerAuth: []
      summary: 'Admin: Get all product reviews'
      tags:
      - product-review
  /product-review/all:
    get:
      consumes:
      - application/json
      description: Retrieves all product reviews with optional filtering
      parameters:
      - description: Query parameters
        in: body
        name: request
        required: true
        schema:
          $ref: '#/definitions/product_review.GetAllProductReviewQuery'
      produces:
      - application/json
      responses:
        "200":
          description: List of reviews
          schema:
            $ref: '#/definitions/resp.Result'
        "400":
          description: Validation error
          schema:
            $ref: '#/definitions/resp.Result'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/resp.Result'
        "500":
          description: Internal server error
          schema:
            $ref: '#/definitions/resp.Result'
      security:
      - BearerAuth: []
      summary: Get all product reviews
      tags:
      - product-review
  /product/admin/all:
    get:
      consumes:
      - application/json
      description: Admin endpoint to retrieve all products with additional information
      parameters:
      - description: Query parameters
        in: body
        name: request
        required: true
        schema:
          $ref: '#/definitions/product.AdminGetAllProductQuery'
      produces:
      - application/json
      responses:
        "200":
          description: List of all products
          schema:
            $ref: '#/definitions/resp.Result'
        "400":
          description: Validation error
          schema:
            $ref: '#/definitions/resp.Result'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/resp.Result'
        "403":
          description: Forbidden - Admin access required
          schema:
            $ref: '#/definitions/resp.Result'
        "500":
          description: Internal server error
          schema:
            $ref: '#/definitions/resp.Result'
      security:
      - BearerAuth: []
      summary: 'Admin: Get all products'
      tags:
      - product
  /product/all:
    get:
      consumes:
      - application/json
      description: Retrieves all products with optional filtering
      parameters:
      - description: Query parameters
        in: body
        name: request
        required: true
        schema:
          $ref: '#/definitions/product.GetAllProductQuery'
      produces:
      - application/json
      responses:
        "200":
          description: List of products
          schema:
            $ref: '#/definitions/resp.Result'
        "400":
          description: Validation error
          schema:
            $ref: '#/definitions/resp.Result'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/resp.Result'
        "500":
          description: Internal server error
          schema:
            $ref: '#/definitions/resp.Result'
      security:
      - BearerAuth: []
      summary: Get all products
      tags:
      - product
  /product/filters-sort:
    post:
      consumes:
      - application/json
      description: Retrieves products based on specified filters and sorting criteria
      parameters:
      - description: Filter and sort parameters
        in: body
        name: request
        required: true
        schema:
          $ref: '#/definitions/product.GetByFiltersSortProductQuery'
      produces:
      - application/json
      responses:
        "200":
          description: Filtered and sorted products
          schema:
            $ref: '#/definitions/resp.Result'
        "400":
          description: Validation error
          schema:
            $ref: '#/definitions/resp.Result'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/resp.Result'
        "500":
          description: Internal server error
          schema:
            $ref: '#/definitions/resp.Result'
      security:
      - BearerAuth: []
      summary: Get products by filters and sorting
      tags:
      - product
  /role:
    post:
      consumes:
      - application/json
      description: Creates a new role with specified permissions
      parameters:
      - description: Role information
        in: body
        name: request
        required: true
        schema:
          $ref: '#/definitions/role.CreateRoleCommand'
      produces:
      - application/json
      responses:
        "201":
          description: Created role
          schema:
            $ref: '#/definitions/resp.Result'
        "400":
          description: Validation error
          schema:
            $ref: '#/definitions/resp.Result'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/resp.Result'
        "403":
          description: Forbidden - Admin access required
          schema:
            $ref: '#/definitions/resp.Result'
        "500":
          description: Internal server error
          schema:
            $ref: '#/definitions/resp.Result'
      security:
      - BearerAuth: []
      summary: Create a new role
      tags:
      - role
    put:
      consumes:
      - application/json
      description: Updates an existing role's name and permissions
      parameters:
      - description: Updated role information
        in: body
        name: request
        required: true
        schema:
          $ref: '#/definitions/role.UpdateRoleCommand'
      produces:
      - application/json
      responses:
        "200":
          description: Updated role
          schema:
            $ref: '#/definitions/resp.Result'
        "400":
          description: Validation error
          schema:
            $ref: '#/definitions/resp.Result'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/resp.Result'
        "403":
          description: Forbidden - Admin access required
          schema:
            $ref: '#/definitions/resp.Result'
        "404":
          description: Role not found
          schema:
            $ref: '#/definitions/resp.Result'
        "500":
          description: Internal server error
          schema:
            $ref: '#/definitions/resp.Result'
      security:
      - BearerAuth: []
      summary: Update an existing role
      tags:
      - role
  /role/all:
    get:
      consumes:
      - application/json
      description: Retrieves all roles in the system
      parameters:
      - description: Query parameters
        in: body
        name: request
        required: true
        schema:
          $ref: '#/definitions/role.GetAllRoleQuery'
      produces:
      - application/json
      responses:
        "200":
          description: List of all roles
          schema:
            $ref: '#/definitions/resp.Result'
        "400":
          description: Validation error
          schema:
            $ref: '#/definitions/resp.Result'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/resp.Result'
        "500":
          description: Internal server error
          schema:
            $ref: '#/definitions/resp.Result'
      security:
      - BearerAuth: []
      summary: Get all roles
      tags:
      - role
  /role/customer:
    put:
      consumes:
      - application/json
      description: Assigns a specific role to a customer
      parameters:
      - description: Role and customer assignment details
        in: body
        name: request
        required: true
        schema:
          $ref: '#/definitions/role.SetRoleToCustomerCommand'
      produces:
      - application/json
      responses:
        "200":
          description: Role assigned to customer
          schema:
            $ref: '#/definitions/resp.Result'
        "400":
          description: Validation error
          schema:
            $ref: '#/definitions/resp.Result'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/resp.Result'
        "403":
          description: Forbidden - Admin access required
          schema:
            $ref: '#/definitions/resp.Result'
        "404":
          description: Role or customer not found
          schema:
            $ref: '#/definitions/resp.Result'
        "500":
          description: Internal server error
          schema:
            $ref: '#/definitions/resp.Result'
      security:
      - BearerAuth: []
      summary: Assign role to customer
      tags:
      - role
  /role/permission/all:
    get:
      consumes:
      - application/json
      description: Retrieves all available permissions in the system
      parameters:
      - description: Query parameters
        in: body
        name: request
        required: true
        schema:
          $ref: '#/definitions/role.GetAllPermissionQuery'
      produces:
      - application/json
      responses:
        "200":
          description: List of all permissions
          schema:
            $ref: '#/definitions/resp.Result'
        "400":
          description: Validation error
          schema:
            $ref: '#/definitions/resp.Result'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/resp.Result'
        "500":
          description: Internal server error
          schema:
            $ref: '#/definitions/resp.Result'
      security:
      - BearerAuth: []
      summary: Get all permissions
      tags:
      - role
  /role/permissions:
    get:
      consumes:
      - application/json
      description: Retrieves all permissions assigned to a specific role
      parameters:
      - description: Role ID to retrieve permissions for
        in: body
        name: request
        required: true
        schema:
          $ref: '#/definitions/role.GetRolePermissionsQuery'
      produces:
      - application/json
      responses:
        "200":
          description: List of permissions for the role
          schema:
            $ref: '#/definitions/resp.Result'
        "400":
          description: Validation error
          schema:
            $ref: '#/definitions/resp.Result'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/resp.Result'
        "404":
          description: Role not found
          schema:
            $ref: '#/definitions/resp.Result'
        "500":
          description: Internal server error
          schema:
            $ref: '#/definitions/resp.Result'
      security:
      - BearerAuth: []
      summary: Get role permissions
      tags:
      - role
  /role/plan:
    put:
      consumes:
      - application/json
      description: Assigns a specific role to a subscription plan
      parameters:
      - description: Role and plan assignment details
        in: body
        name: request
        required: true
        schema:
          $ref: '#/definitions/role.SetRoleToPlanCommand'
      produces:
      - application/json
      responses:
        "200":
          description: Role assigned to plan
          schema:
            $ref: '#/definitions/resp.Result'
        "400":
          description: Validation error
          schema:
            $ref: '#/definitions/resp.Result'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/resp.Result'
        "403":
          description: Forbidden - Admin access required
          schema:
            $ref: '#/definitions/resp.Result'
        "404":
          description: Role or plan not found
          schema:
            $ref: '#/definitions/resp.Result'
        "500":
          description: Internal server error
          schema:
            $ref: '#/definitions/resp.Result'
      security:
      - BearerAuth: []
      summary: Assign role to plan
      tags:
      - role
  /role/user:
    put:
      consumes:
      - application/json
      description: Assigns a specific role to a user
      parameters:
      - description: Role and user assignment details
        in: body
        name: request
        required: true
        schema:
          $ref: '#/definitions/role.SetRoleToUserCommand'
      produces:
      - application/json
      responses:
        "200":
          description: Role assigned to user
          schema:
            $ref: '#/definitions/resp.Result'
        "400":
          description: Validation error
          schema:
            $ref: '#/definitions/resp.Result'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/resp.Result'
        "403":
          description: Forbidden - Admin access required
          schema:
            $ref: '#/definitions/resp.Result'
        "404":
          description: Role or user not found
          schema:
            $ref: '#/definitions/resp.Result'
        "500":
          description: Internal server error
          schema:
            $ref: '#/definitions/resp.Result'
      security:
      - BearerAuth: []
      summary: Assign role to user
      tags:
      - role
  /site:
    delete:
      consumes:
      - application/json
      description: Deletes a site for the authenticated user
      parameters:
      - description: Site ID to delete
        in: body
        name: request
        required: true
        schema:
          $ref: '#/definitions/site.DeleteSiteCommand'
      produces:
      - application/json
      responses:
        "200":
          description: Deleted site confirmation
          schema:
            $ref: '#/definitions/resp.Result'
        "400":
          description: Validation error
          schema:
            $ref: '#/definitions/resp.Result'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/resp.Result'
        "404":
          description: Site not found
          schema:
            $ref: '#/definitions/resp.Result'
        "500":
          description: Internal server error
          schema:
            $ref: '#/definitions/resp.Result'
      security:
      - BearerAuth: []
      summary: Delete a site
      tags:
      - site
    get:
      consumes:
      - application/json
      description: Retrieves a specific site by its ID for the authenticated user
      parameters:
      - description: Site ID to retrieve
        in: body
        name: request
        required: true
        schema:
          $ref: '#/definitions/site.GetByIdSiteQuery'
      produces:
      - application/json
      responses:
        "200":
          description: Site details
          schema:
            $ref: '#/definitions/resp.Result'
        "400":
          description: Validation error
          schema:
            $ref: '#/definitions/resp.Result'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/resp.Result'
        "404":
          description: Site not found
          schema:
            $ref: '#/definitions/resp.Result'
        "500":
          description: Internal server error
          schema:
            $ref: '#/definitions/resp.Result'
      security:
      - BearerAuth: []
      summary: Get site by ID
      tags:
      - site
    post:
      consumes:
      - application/json
      description: Creates a new site for the authenticated user
      parameters:
      - description: Site information
        in: body
        name: request
        required: true
        schema:
          $ref: '#/definitions/site.CreateSiteCommand'
      produces:
      - application/json
      responses:
        "201":
          description: Created site
          schema:
            $ref: '#/definitions/resp.Result'
        "400":
          description: Validation error
          schema:
            $ref: '#/definitions/resp.Result'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/resp.Result'
        "500":
          description: Internal server error
          schema:
            $ref: '#/definitions/resp.Result'
      security:
      - BearerAuth: []
      summary: Create a new site
      tags:
      - site
    put:
      consumes:
      - application/json
      description: Updates an existing site for the authenticated user
      parameters:
      - description: Updated site information
        in: body
        name: request
        required: true
        schema:
          $ref: '#/definitions/site.UpdateSiteCommand'
      produces:
      - application/json
      responses:
        "200":
          description: Updated site
          schema:
            $ref: '#/definitions/resp.Result'
        "400":
          description: Validation error
          schema:
            $ref: '#/definitions/resp.Result'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/resp.Result'
        "404":
          description: Site not found
          schema:
            $ref: '#/definitions/resp.Result'
        "500":
          description: Internal server error
          schema:
            $ref: '#/definitions/resp.Result'
      security:
      - BearerAuth: []
      summary: Update an existing site
      tags:
      - site
  /site/admin/all:
    get:
      consumes:
      - application/json
      description: Admin endpoint to retrieve all sites in the system
      parameters:
      - description: Query parameters
        in: body
        name: request
        required: true
        schema:
          $ref: '#/definitions/site.AdminGetAllSiteQuery'
      produces:
      - application/json
      responses:
        "200":
          description: List of all sites
          schema:
            $ref: '#/definitions/resp.Result'
        "400":
          description: Validation error
          schema:
            $ref: '#/definitions/resp.Result'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/resp.Result'
        "403":
          description: Forbidden - Admin access required
          schema:
            $ref: '#/definitions/resp.Result'
        "500":
          description: Internal server error
          schema:
            $ref: '#/definitions/resp.Result'
      security:
      - BearerAuth: []
      summary: 'Admin: Get all sites'
      tags:
      - site
  /site/all:
    get:
      consumes:
      - application/json
      description: Retrieves all sites for the authenticated user
      parameters:
      - description: Query parameters
        in: body
        name: request
        required: true
        schema:
          $ref: '#/definitions/site.GetAllSiteQuery'
      produces:
      - application/json
      responses:
        "200":
          description: List of sites
          schema:
            $ref: '#/definitions/resp.Result'
        "400":
          description: Validation error
          schema:
            $ref: '#/definitions/resp.Result'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/resp.Result'
        "500":
          description: Internal server error
          schema:
            $ref: '#/definitions/resp.Result'
      security:
      - BearerAuth: []
      summary: Get all sites
      tags:
      - site
  /ticket:
    get:
      consumes:
      - application/json
      description: Retrieves a specific ticket by its ID for the authenticated user
      parameters:
      - description: Ticket ID to retrieve
        in: body
        name: request
        required: true
        schema:
          $ref: '#/definitions/ticket.GetByIdTicketQuery'
      produces:
      - application/json
      responses:
        "200":
          description: Ticket details
          schema:
            $ref: '#/definitions/resp.Result'
        "400":
          description: Validation error
          schema:
            $ref: '#/definitions/resp.Result'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/resp.Result'
        "404":
          description: Ticket not found
          schema:
            $ref: '#/definitions/resp.Result'
        "500":
          description: Internal server error
          schema:
            $ref: '#/definitions/resp.Result'
      security:
      - BearerAuth: []
      summary: Get ticket by ID
      tags:
      - ticket
    post:
      consumes:
      - application/json
      description: Creates a new support ticket for the authenticated user
      parameters:
      - description: Ticket information
        in: body
        name: request
        required: true
        schema:
          $ref: '#/definitions/ticket.CreateTicketCommand'
      produces:
      - application/json
      responses:
        "201":
          description: Created ticket
          schema:
            $ref: '#/definitions/resp.Result'
        "400":
          description: Validation error
          schema:
            $ref: '#/definitions/resp.Result'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/resp.Result'
        "500":
          description: Internal server error
          schema:
            $ref: '#/definitions/resp.Result'
      security:
      - BearerAuth: []
      summary: Create a new ticket
      tags:
      - ticket
  /ticket/admin/all:
    get:
      consumes:
      - application/json
      description: Admin endpoint to retrieve all tickets in the system
      parameters:
      - description: Query parameters
        in: body
        name: request
        required: true
        schema:
          $ref: '#/definitions/ticket.AdminGetAllTicketQuery'
      produces:
      - application/json
      responses:
        "200":
          description: List of all tickets
          schema:
            $ref: '#/definitions/resp.Result'
        "400":
          description: Validation error
          schema:
            $ref: '#/definitions/resp.Result'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/resp.Result'
        "403":
          description: Forbidden - Admin access required
          schema:
            $ref: '#/definitions/resp.Result'
        "500":
          description: Internal server error
          schema:
            $ref: '#/definitions/resp.Result'
      security:
      - BearerAuth: []
      summary: 'Admin: Get all tickets'
      tags:
      - ticket
  /ticket/admin/reply:
    post:
      consumes:
      - application/json
      description: Admin endpoint to add a reply to any support ticket
      parameters:
      - description: Admin reply information
        in: body
        name: request
        required: true
        schema:
          $ref: '#/definitions/ticket.AdminReplayTicketCommand'
      produces:
      - application/json
      responses:
        "200":
          description: Updated ticket with admin reply
          schema:
            $ref: '#/definitions/resp.Result'
        "400":
          description: Validation error
          schema:
            $ref: '#/definitions/resp.Result'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/resp.Result'
        "403":
          description: Forbidden - Admin access required
          schema:
            $ref: '#/definitions/resp.Result'
        "404":
          description: Ticket not found
          schema:
            $ref: '#/definitions/resp.Result'
        "500":
          description: Internal server error
          schema:
            $ref: '#/definitions/resp.Result'
      security:
      - BearerAuth: []
      summary: 'Admin: Reply to a ticket'
      tags:
      - ticket
  /ticket/all:
    get:
      consumes:
      - application/json
      description: Retrieves all tickets for the authenticated user
      parameters:
      - description: Query parameters
        in: body
        name: request
        required: true
        schema:
          $ref: '#/definitions/ticket.GetAllTicketQuery'
      produces:
      - application/json
      responses:
        "200":
          description: List of tickets
          schema:
            $ref: '#/definitions/resp.Result'
        "400":
          description: Validation error
          schema:
            $ref: '#/definitions/resp.Result'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/resp.Result'
        "500":
          description: Internal server error
          schema:
            $ref: '#/definitions/resp.Result'
      security:
      - BearerAuth: []
      summary: Get all tickets
      tags:
      - ticket
  /ticket/reply:
    post:
      consumes:
      - application/json
      description: Adds a user reply to an existing support ticket
      parameters:
      - description: Reply information
        in: body
        name: request
        required: true
        schema:
          $ref: '#/definitions/ticket.ReplayTicketCommand'
      produces:
      - application/json
      responses:
        "200":
          description: Updated ticket with reply
          schema:
            $ref: '#/definitions/resp.Result'
        "400":
          description: Validation error
          schema:
            $ref: '#/definitions/resp.Result'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/resp.Result'
        "404":
          description: Ticket not found
          schema:
            $ref: '#/definitions/resp.Result'
        "500":
          description: Internal server error
          schema:
            $ref: '#/definitions/resp.Result'
      security:
      - BearerAuth: []
      summary: Reply to a ticket
      tags:
      - ticket
  /unit-price:
    put:
      consumes:
      - application/json
      description: Updates an existing unit price configuration
      parameters:
      - description: Unit price update information
        in: body
        name: request
        required: true
        schema:
          $ref: '#/definitions/unit_price.UpdateUnitPriceCommand'
      produces:
      - application/json
      responses:
        "200":
          description: Updated unit price
          schema:
            $ref: '#/definitions/resp.Result'
        "400":
          description: Validation error
          schema:
            $ref: '#/definitions/resp.Result'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/resp.Result'
        "404":
          description: Unit price not found
          schema:
            $ref: '#/definitions/resp.Result'
        "500":
          description: Internal server error
          schema:
            $ref: '#/definitions/resp.Result'
      security:
      - BearerAuth: []
      summary: Update unit price
      tags:
      - unit-price
  /unit-price/all:
    get:
      consumes:
      - application/json
      description: Retrieves all unit price configurations
      parameters:
      - description: Query parameters
        in: body
        name: request
        required: true
        schema:
          $ref: '#/definitions/unit_price.GetAllUnitPriceQuery'
      produces:
      - application/json
      responses:
        "200":
          description: List of unit prices
          schema:
            $ref: '#/definitions/resp.Result'
        "400":
          description: Validation error
          schema:
            $ref: '#/definitions/resp.Result'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/resp.Result'
        "500":
          description: Internal server error
          schema:
            $ref: '#/definitions/resp.Result'
      security:
      - BearerAuth: []
      summary: Get all unit prices
      tags:
      - unit-price
  /unit-price/calculate:
    get:
      consumes:
      - application/json
      description: Calculates the unit price based on provided parameters
      parameters:
      - description: Parameters for price calculation
        in: body
        name: request
        required: true
        schema:
          $ref: '#/definitions/unit_price.CalculateUnitPriceQuery'
      produces:
      - application/json
      responses:
        "200":
          description: Calculated unit price
          schema:
            $ref: '#/definitions/resp.Result'
        "400":
          description: Validation error
          schema:
            $ref: '#/definitions/resp.Result'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/resp.Result'
        "500":
          description: Internal server error
          schema:
            $ref: '#/definitions/resp.Result'
      security:
      - BearerAuth: []
      summary: Calculate unit price
      tags:
      - unit-price
  /user/admin/all:
    get:
      consumes:
      - application/json
      description: Admin endpoint to retrieve all users in the system
      parameters:
      - description: Query parameters
        in: body
        name: request
        required: true
        schema:
          $ref: '#/definitions/user.AdminGetAllUserQuery'
      produces:
      - application/json
      responses:
        "200":
          description: List of all users
          schema:
            $ref: '#/definitions/resp.Result'
        "400":
          description: Validation error
          schema:
            $ref: '#/definitions/resp.Result'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/resp.Result'
        "403":
          description: Forbidden - Admin access required
          schema:
            $ref: '#/definitions/resp.Result'
        "500":
          description: Internal server error
          schema:
            $ref: '#/definitions/resp.Result'
      security:
      - BearerAuth: []
      summary: 'Admin: Get all users'
      tags:
      - user
  /user/credit/charge:
    post:
      consumes:
      - application/json
      description: Creates a request to charge the user's account credit
      parameters:
      - description: Credit charge request details
        in: body
        name: request
        required: true
        schema:
          $ref: '#/definitions/user.ChargeCreditRequestUserCommand'
      produces:
      - application/json
      responses:
        "201":
          description: Created charge request
          schema:
            $ref: '#/definitions/resp.Result'
        "400":
          description: Validation error
          schema:
            $ref: '#/definitions/resp.Result'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/resp.Result'
        "500":
          description: Internal server error
          schema:
            $ref: '#/definitions/resp.Result'
      security:
      - BearerAuth: []
      summary: Request credit charge
      tags:
      - user
  /user/login:
    post:
      consumes:
      - application/json
      description: Authenticates a user and returns a token
      parameters:
      - description: User login credentials
        in: body
        name: request
        required: true
        schema:
          $ref: '#/definitions/user.LoginUserCommand'
      produces:
      - application/json
      responses:
        "200":
          description: Authentication token and user details
          schema:
            $ref: '#/definitions/resp.Result'
        "400":
          description: Validation error
          schema:
            $ref: '#/definitions/resp.Result'
        "401":
          description: Invalid credentials
          schema:
            $ref: '#/definitions/resp.Result'
        "500":
          description: Internal server error
          schema:
            $ref: '#/definitions/resp.Result'
      summary: User login
      tags:
      - user
  /user/plan/upgrade:
    post:
      consumes:
      - application/json
      description: Creates a request to upgrade the user's subscription plan
      parameters:
      - description: Plan upgrade request details
        in: body
        name: request
        required: true
        schema:
          $ref: '#/definitions/user.UpgradePlanRequestUserCommand'
      produces:
      - application/json
      responses:
        "201":
          description: Created plan upgrade request
          schema:
            $ref: '#/definitions/resp.Result'
        "400":
          description: Validation error
          schema:
            $ref: '#/definitions/resp.Result'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/resp.Result'
        "500":
          description: Internal server error
          schema:
            $ref: '#/definitions/resp.Result'
      security:
      - BearerAuth: []
      summary: Request plan upgrade
      tags:
      - user
  /user/profile:
    get:
      consumes:
      - application/json
      description: Retrieves the profile information for the authenticated user
      parameters:
      - description: Query parameters
        in: body
        name: request
        required: true
        schema:
          $ref: '#/definitions/user.GetProfileUserQuery'
      produces:
      - application/json
      responses:
        "200":
          description: User profile details
          schema:
            $ref: '#/definitions/resp.Result'
        "400":
          description: Validation error
          schema:
            $ref: '#/definitions/resp.Result'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/resp.Result'
        "404":
          description: User not found
          schema:
            $ref: '#/definitions/resp.Result'
        "500":
          description: Internal server error
          schema:
            $ref: '#/definitions/resp.Result'
      security:
      - BearerAuth: []
      summary: Get user profile
      tags:
      - user
    put:
      consumes:
      - application/json
      description: Updates the profile information for the authenticated user
      parameters:
      - description: Updated profile information
        in: body
        name: request
        required: true
        schema:
          $ref: '#/definitions/user.UpdateProfileUserCommand'
      produces:
      - application/json
      responses:
        "200":
          description: Updated user profile
          schema:
            $ref: '#/definitions/resp.Result'
        "400":
          description: Validation error
          schema:
            $ref: '#/definitions/resp.Result'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/resp.Result'
        "500":
          description: Internal server error
          schema:
            $ref: '#/definitions/resp.Result'
      security:
      - BearerAuth: []
      summary: Update user profile
      tags:
      - user
  /user/register:
    post:
      consumes:
      - application/json
      description: Creates a new user account
      parameters:
      - description: User registration details
        in: body
        name: request
        required: true
        schema:
          $ref: '#/definitions/user.RegisterUserCommand'
      produces:
      - application/json
      responses:
        "201":
          description: Created user account
          schema:
            $ref: '#/definitions/resp.Result'
        "400":
          description: Validation error
          schema:
            $ref: '#/definitions/resp.Result'
        "500":
          description: Internal server error
          schema:
            $ref: '#/definitions/resp.Result'
      summary: Register new user
      tags:
      - user
  /user/verify:
    get:
      consumes:
      - application/json
      description: Verifies a user's email or resets password using a verification
        code
      parameters:
      - description: Verification details
        in: body
        name: request
        required: true
        schema:
          $ref: '#/definitions/user.VerifyUserQuery'
      produces:
      - application/json
      responses:
        "200":
          description: User verified or password reset
          schema:
            $ref: '#/definitions/resp.Result'
        "400":
          description: Validation error
          schema:
            $ref: '#/definitions/resp.Result'
        "404":
          description: User not found or invalid code
          schema:
            $ref: '#/definitions/resp.Result'
        "500":
          description: Internal server error
          schema:
            $ref: '#/definitions/resp.Result'
      summary: Verify user
      tags:
      - user
  /user/verify-forget/request:
    post:
      consumes:
      - application/json
      description: Sends a verification code or password reset link to the user's
        email
      parameters:
      - description: Email verification or password reset request
        in: body
        name: request
        required: true
        schema:
          $ref: '#/definitions/user.RequestVerifyAndForgetUserCommand'
      produces:
      - application/json
      responses:
        "201":
          description: Verification or reset request created
          schema:
            $ref: '#/definitions/resp.Result'
        "400":
          description: Validation error
          schema:
            $ref: '#/definitions/resp.Result'
        "404":
          description: User not found
          schema:
            $ref: '#/definitions/resp.Result'
        "500":
          description: Internal server error
          schema:
            $ref: '#/definitions/resp.Result'
      summary: Request verification or password reset
      tags:
      - user
  /website/article:
    get:
      consumes:
      - application/json
      description: Retrieves a specific article identified by its slug
      parameters:
      - description: Article slug
        in: body
        name: request
        required: true
        schema:
          $ref: '#/definitions/website.GetSingleArticleBySlugQuery'
      produces:
      - application/json
      responses:
        "200":
          description: Article details
          schema:
            $ref: '#/definitions/resp.Result'
        "400":
          description: Validation error
          schema:
            $ref: '#/definitions/resp.Result'
        "404":
          description: Article not found
          schema:
            $ref: '#/definitions/resp.Result'
        "500":
          description: Internal server error
          schema:
            $ref: '#/definitions/resp.Result'
      summary: Get article by slug
      tags:
      - website
  /website/article/category:
    get:
      consumes:
      - application/json
      description: Retrieves articles belonging to a specific category identified
        by slug
      parameters:
      - description: Category slug and query parameters
        in: body
        name: request
        required: true
        schema:
          $ref: '#/definitions/website.GetArticlesByCategorySlugQuery'
      produces:
      - application/json
      responses:
        "200":
          description: List of articles in the category
          schema:
            $ref: '#/definitions/resp.Result'
        "400":
          description: Validation error
          schema:
            $ref: '#/definitions/resp.Result'
        "404":
          description: Category not found
          schema:
            $ref: '#/definitions/resp.Result'
        "500":
          description: Internal server error
          schema:
            $ref: '#/definitions/resp.Result'
      summary: Get articles by category slug
      tags:
      - website
  /website/article/filters-sort:
    get:
      consumes:
      - application/json
      description: Retrieves available filters and sorting options for articles
      parameters:
      - description: Query parameters
        in: body
        name: request
        required: true
        schema:
          $ref: '#/definitions/website.GetFiltersSortArticleQuery'
      produces:
      - application/json
      responses:
        "200":
          description: Article filters and sorting options
          schema:
            $ref: '#/definitions/resp.Result'
        "400":
          description: Validation error
          schema:
            $ref: '#/definitions/resp.Result'
        "500":
          description: Internal server error
          schema:
            $ref: '#/definitions/resp.Result'
      summary: Get article filters and sorting options
      tags:
      - website
  /website/header-footer:
    get:
      consumes:
      - application/json
      description: Retrieves header and footer content for a specific domain
      parameters:
      - description: Domain parameters
        in: body
        name: request
        required: true
        schema:
          $ref: '#/definitions/website.GetByDomainHeaderFooterQuery'
      produces:
      - application/json
      responses:
        "200":
          description: Header and footer content
          schema:
            $ref: '#/definitions/resp.Result'
        "400":
          description: Validation error
          schema:
            $ref: '#/definitions/resp.Result'
        "404":
          description: Domain not found
          schema:
            $ref: '#/definitions/resp.Result'
        "500":
          description: Internal server error
          schema:
            $ref: '#/definitions/resp.Result'
      summary: Get header and footer by domain
      tags:
      - website
  /website/page:
    get:
      consumes:
      - application/json
      description: Retrieves page content for a specific domain
      parameters:
      - description: Domain and page parameters
        in: body
        name: request
        required: true
        schema:
          $ref: '#/definitions/website.GetByDomainPageQuery'
      produces:
      - application/json
      responses:
        "200":
          description: Page content
          schema:
            $ref: '#/definitions/resp.Result'
        "400":
          description: Validation error
          schema:
            $ref: '#/definitions/resp.Result'
        "404":
          description: Page or domain not found
          schema:
            $ref: '#/definitions/resp.Result'
        "500":
          description: Internal server error
          schema:
            $ref: '#/definitions/resp.Result'
      summary: Get page by domain
      tags:
      - website
  /website/product:
    get:
      consumes:
      - application/json
      description: Retrieves a specific product identified by its slug
      parameters:
      - description: Product slug
        in: body
        name: request
        required: true
        schema:
          $ref: '#/definitions/website.GetSingleProductBySlugQuery'
      produces:
      - application/json
      responses:
        "200":
          description: Product details
          schema:
            $ref: '#/definitions/resp.Result'
        "400":
          description: Validation error
          schema:
            $ref: '#/definitions/resp.Result'
        "404":
          description: Product not found
          schema:
            $ref: '#/definitions/resp.Result'
        "500":
          description: Internal server error
          schema:
            $ref: '#/definitions/resp.Result'
      summary: Get product by slug
      tags:
      - website
  /website/product/category:
    get:
      consumes:
      - application/json
      description: Retrieves products belonging to a specific category identified
        by slug
      parameters:
      - description: Category slug and query parameters
        in: body
        name: request
        required: true
        schema:
          $ref: '#/definitions/website.GetProductsByCategorySlugQuery'
      produces:
      - application/json
      responses:
        "200":
          description: List of products in the category
          schema:
            $ref: '#/definitions/resp.Result'
        "400":
          description: Validation error
          schema:
            $ref: '#/definitions/resp.Result'
        "404":
          description: Category not found
          schema:
            $ref: '#/definitions/resp.Result'
        "500":
          description: Internal server error
          schema:
            $ref: '#/definitions/resp.Result'
      summary: Get products by category slug
      tags:
      - website
  /website/product/filters-sort:
    get:
      consumes:
      - application/json
      description: Retrieves available filters and sorting options for products
      parameters:
      - description: Query parameters
        in: body
        name: request
        required: true
        schema:
          $ref: '#/definitions/website.GetFiltersSortProductQuery'
      produces:
      - application/json
      responses:
        "200":
          description: Product filters and sorting options
          schema:
            $ref: '#/definitions/resp.Result'
        "400":
          description: Validation error
          schema:
            $ref: '#/definitions/resp.Result'
        "500":
          description: Internal server error
          schema:
            $ref: '#/definitions/resp.Result'
      summary: Get product filters and sorting options
      tags:
      - website
  /website/product/search:
    get:
      consumes:
      - application/json
      description: Searches for products based on provided criteria
      parameters:
      - description: Search parameters
        in: body
        name: request
        required: true
        schema:
          $ref: '#/definitions/website.ProductSearchListQuery'
      produces:
      - application/json
      responses:
        "200":
          description: List of products matching search criteria
          schema:
            $ref: '#/definitions/resp.Result'
        "400":
          description: Validation error
          schema:
            $ref: '#/definitions/resp.Result'
        "500":
          description: Internal server error
          schema:
            $ref: '#/definitions/resp.Result'
      summary: Search products
      tags:
      - website
swagger: "2.0"

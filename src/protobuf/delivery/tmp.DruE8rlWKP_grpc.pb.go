// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.5.1
// - protoc             v3.21.12
// source: tmp.DruE8rlWKP

package grpc

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.64.0 or later.
const _ = grpc.SupportPackageIsVersion9

const (
	VendorDeliveryService_GetAllVendors_FullMethodName                     = "/service.VendorDeliveryService/GetAllVendors"
	VendorDeliveryService_GetVendorsByIds_FullMethodName                   = "/service.VendorDeliveryService/GetVendorsByIds"
	VendorDeliveryService_GetDeliveryEstimationTimeByOrder_FullMethodName  = "/service.VendorDeliveryService/GetDeliveryEstimationTimeByOrder"
	VendorDeliveryService_GetDeliveryEstimationTimeByBasket_FullMethodName = "/service.VendorDeliveryService/GetDeliveryEstimationTimeByBasket"
	VendorDeliveryService_GetOrderPickupVendors_FullMethodName             = "/service.VendorDeliveryService/GetOrderPickupVendors"
	VendorDeliveryService_GetVendorByMultipleCoordinates_FullMethodName    = "/service.VendorDeliveryService/GetVendorByMultipleCoordinates"
	VendorDeliveryService_GetEtaVendors_FullMethodName                     = "/service.VendorDeliveryService/GetEtaVendors"
)

// VendorDeliveryServiceClient is the client API for VendorDeliveryService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type VendorDeliveryServiceClient interface {
	GetAllVendors(ctx context.Context, in *GetAllVendorsQuery, opts ...grpc.CallOption) (*GetAllVendorsResponse, error)
	GetVendorsByIds(ctx context.Context, in *GetVendorsByIdsQuery, opts ...grpc.CallOption) (*GetVendorsByIdsResponse, error)
	GetDeliveryEstimationTimeByOrder(ctx context.Context, in *GetDeliveryEstimationTimeByOrderQuery, opts ...grpc.CallOption) (*GetDeliveryEstimationTimeByOrderResponse, error)
	GetDeliveryEstimationTimeByBasket(ctx context.Context, in *GetDeliveryEstimationTimeByBasketQuery, opts ...grpc.CallOption) (*GetDeliveryEstimationTimeByBasketResponse, error)
	GetOrderPickupVendors(ctx context.Context, in *GetOrderPickupVendorsQuery, opts ...grpc.CallOption) (*GetOrderPickupVendorsResponse, error)
	GetVendorByMultipleCoordinates(ctx context.Context, in *GetVendorByMultipleCoordinatesQuery, opts ...grpc.CallOption) (*GetVendorByMultipleCoordinatesResponse, error)
	GetEtaVendors(ctx context.Context, in *GetEtaVendorsQuery, opts ...grpc.CallOption) (*GetEtaVendorsResponse, error)
}

type vendorDeliveryServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewVendorDeliveryServiceClient(cc grpc.ClientConnInterface) VendorDeliveryServiceClient {
	return &vendorDeliveryServiceClient{cc}
}

func (c *vendorDeliveryServiceClient) GetAllVendors(ctx context.Context, in *GetAllVendorsQuery, opts ...grpc.CallOption) (*GetAllVendorsResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GetAllVendorsResponse)
	err := c.cc.Invoke(ctx, VendorDeliveryService_GetAllVendors_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *vendorDeliveryServiceClient) GetVendorsByIds(ctx context.Context, in *GetVendorsByIdsQuery, opts ...grpc.CallOption) (*GetVendorsByIdsResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GetVendorsByIdsResponse)
	err := c.cc.Invoke(ctx, VendorDeliveryService_GetVendorsByIds_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *vendorDeliveryServiceClient) GetDeliveryEstimationTimeByOrder(ctx context.Context, in *GetDeliveryEstimationTimeByOrderQuery, opts ...grpc.CallOption) (*GetDeliveryEstimationTimeByOrderResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GetDeliveryEstimationTimeByOrderResponse)
	err := c.cc.Invoke(ctx, VendorDeliveryService_GetDeliveryEstimationTimeByOrder_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *vendorDeliveryServiceClient) GetDeliveryEstimationTimeByBasket(ctx context.Context, in *GetDeliveryEstimationTimeByBasketQuery, opts ...grpc.CallOption) (*GetDeliveryEstimationTimeByBasketResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GetDeliveryEstimationTimeByBasketResponse)
	err := c.cc.Invoke(ctx, VendorDeliveryService_GetDeliveryEstimationTimeByBasket_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *vendorDeliveryServiceClient) GetOrderPickupVendors(ctx context.Context, in *GetOrderPickupVendorsQuery, opts ...grpc.CallOption) (*GetOrderPickupVendorsResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GetOrderPickupVendorsResponse)
	err := c.cc.Invoke(ctx, VendorDeliveryService_GetOrderPickupVendors_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *vendorDeliveryServiceClient) GetVendorByMultipleCoordinates(ctx context.Context, in *GetVendorByMultipleCoordinatesQuery, opts ...grpc.CallOption) (*GetVendorByMultipleCoordinatesResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GetVendorByMultipleCoordinatesResponse)
	err := c.cc.Invoke(ctx, VendorDeliveryService_GetVendorByMultipleCoordinates_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *vendorDeliveryServiceClient) GetEtaVendors(ctx context.Context, in *GetEtaVendorsQuery, opts ...grpc.CallOption) (*GetEtaVendorsResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GetEtaVendorsResponse)
	err := c.cc.Invoke(ctx, VendorDeliveryService_GetEtaVendors_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// VendorDeliveryServiceServer is the server API for VendorDeliveryService service.
// All implementations must embed UnimplementedVendorDeliveryServiceServer
// for forward compatibility.
type VendorDeliveryServiceServer interface {
	GetAllVendors(context.Context, *GetAllVendorsQuery) (*GetAllVendorsResponse, error)
	GetVendorsByIds(context.Context, *GetVendorsByIdsQuery) (*GetVendorsByIdsResponse, error)
	GetDeliveryEstimationTimeByOrder(context.Context, *GetDeliveryEstimationTimeByOrderQuery) (*GetDeliveryEstimationTimeByOrderResponse, error)
	GetDeliveryEstimationTimeByBasket(context.Context, *GetDeliveryEstimationTimeByBasketQuery) (*GetDeliveryEstimationTimeByBasketResponse, error)
	GetOrderPickupVendors(context.Context, *GetOrderPickupVendorsQuery) (*GetOrderPickupVendorsResponse, error)
	GetVendorByMultipleCoordinates(context.Context, *GetVendorByMultipleCoordinatesQuery) (*GetVendorByMultipleCoordinatesResponse, error)
	GetEtaVendors(context.Context, *GetEtaVendorsQuery) (*GetEtaVendorsResponse, error)
	mustEmbedUnimplementedVendorDeliveryServiceServer()
}

// UnimplementedVendorDeliveryServiceServer must be embedded to have
// forward compatible implementations.
//
// NOTE: this should be embedded by value instead of pointer to avoid a nil
// pointer dereference when methods are called.
type UnimplementedVendorDeliveryServiceServer struct{}

func (UnimplementedVendorDeliveryServiceServer) GetAllVendors(context.Context, *GetAllVendorsQuery) (*GetAllVendorsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetAllVendors not implemented")
}
func (UnimplementedVendorDeliveryServiceServer) GetVendorsByIds(context.Context, *GetVendorsByIdsQuery) (*GetVendorsByIdsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetVendorsByIds not implemented")
}
func (UnimplementedVendorDeliveryServiceServer) GetDeliveryEstimationTimeByOrder(context.Context, *GetDeliveryEstimationTimeByOrderQuery) (*GetDeliveryEstimationTimeByOrderResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetDeliveryEstimationTimeByOrder not implemented")
}
func (UnimplementedVendorDeliveryServiceServer) GetDeliveryEstimationTimeByBasket(context.Context, *GetDeliveryEstimationTimeByBasketQuery) (*GetDeliveryEstimationTimeByBasketResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetDeliveryEstimationTimeByBasket not implemented")
}
func (UnimplementedVendorDeliveryServiceServer) GetOrderPickupVendors(context.Context, *GetOrderPickupVendorsQuery) (*GetOrderPickupVendorsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetOrderPickupVendors not implemented")
}
func (UnimplementedVendorDeliveryServiceServer) GetVendorByMultipleCoordinates(context.Context, *GetVendorByMultipleCoordinatesQuery) (*GetVendorByMultipleCoordinatesResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetVendorByMultipleCoordinates not implemented")
}
func (UnimplementedVendorDeliveryServiceServer) GetEtaVendors(context.Context, *GetEtaVendorsQuery) (*GetEtaVendorsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetEtaVendors not implemented")
}
func (UnimplementedVendorDeliveryServiceServer) mustEmbedUnimplementedVendorDeliveryServiceServer() {}
func (UnimplementedVendorDeliveryServiceServer) testEmbeddedByValue()                               {}

// UnsafeVendorDeliveryServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to VendorDeliveryServiceServer will
// result in compilation errors.
type UnsafeVendorDeliveryServiceServer interface {
	mustEmbedUnimplementedVendorDeliveryServiceServer()
}

func RegisterVendorDeliveryServiceServer(s grpc.ServiceRegistrar, srv VendorDeliveryServiceServer) {
	// If the following call pancis, it indicates UnimplementedVendorDeliveryServiceServer was
	// embedded by pointer and is nil.  This will cause panics if an
	// unimplemented method is ever invoked, so we test this at initialization
	// time to prevent it from happening at runtime later due to I/O.
	if t, ok := srv.(interface{ testEmbeddedByValue() }); ok {
		t.testEmbeddedByValue()
	}
	s.RegisterService(&VendorDeliveryService_ServiceDesc, srv)
}

func _VendorDeliveryService_GetAllVendors_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetAllVendorsQuery)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(VendorDeliveryServiceServer).GetAllVendors(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: VendorDeliveryService_GetAllVendors_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(VendorDeliveryServiceServer).GetAllVendors(ctx, req.(*GetAllVendorsQuery))
	}
	return interceptor(ctx, in, info, handler)
}

func _VendorDeliveryService_GetVendorsByIds_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetVendorsByIdsQuery)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(VendorDeliveryServiceServer).GetVendorsByIds(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: VendorDeliveryService_GetVendorsByIds_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(VendorDeliveryServiceServer).GetVendorsByIds(ctx, req.(*GetVendorsByIdsQuery))
	}
	return interceptor(ctx, in, info, handler)
}

func _VendorDeliveryService_GetDeliveryEstimationTimeByOrder_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetDeliveryEstimationTimeByOrderQuery)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(VendorDeliveryServiceServer).GetDeliveryEstimationTimeByOrder(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: VendorDeliveryService_GetDeliveryEstimationTimeByOrder_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(VendorDeliveryServiceServer).GetDeliveryEstimationTimeByOrder(ctx, req.(*GetDeliveryEstimationTimeByOrderQuery))
	}
	return interceptor(ctx, in, info, handler)
}

func _VendorDeliveryService_GetDeliveryEstimationTimeByBasket_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetDeliveryEstimationTimeByBasketQuery)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(VendorDeliveryServiceServer).GetDeliveryEstimationTimeByBasket(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: VendorDeliveryService_GetDeliveryEstimationTimeByBasket_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(VendorDeliveryServiceServer).GetDeliveryEstimationTimeByBasket(ctx, req.(*GetDeliveryEstimationTimeByBasketQuery))
	}
	return interceptor(ctx, in, info, handler)
}

func _VendorDeliveryService_GetOrderPickupVendors_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetOrderPickupVendorsQuery)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(VendorDeliveryServiceServer).GetOrderPickupVendors(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: VendorDeliveryService_GetOrderPickupVendors_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(VendorDeliveryServiceServer).GetOrderPickupVendors(ctx, req.(*GetOrderPickupVendorsQuery))
	}
	return interceptor(ctx, in, info, handler)
}

func _VendorDeliveryService_GetVendorByMultipleCoordinates_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetVendorByMultipleCoordinatesQuery)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(VendorDeliveryServiceServer).GetVendorByMultipleCoordinates(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: VendorDeliveryService_GetVendorByMultipleCoordinates_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(VendorDeliveryServiceServer).GetVendorByMultipleCoordinates(ctx, req.(*GetVendorByMultipleCoordinatesQuery))
	}
	return interceptor(ctx, in, info, handler)
}

func _VendorDeliveryService_GetEtaVendors_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetEtaVendorsQuery)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(VendorDeliveryServiceServer).GetEtaVendors(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: VendorDeliveryService_GetEtaVendors_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(VendorDeliveryServiceServer).GetEtaVendors(ctx, req.(*GetEtaVendorsQuery))
	}
	return interceptor(ctx, in, info, handler)
}

// VendorDeliveryService_ServiceDesc is the grpc.ServiceDesc for VendorDeliveryService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var VendorDeliveryService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "service.VendorDeliveryService",
	HandlerType: (*VendorDeliveryServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "GetAllVendors",
			Handler:    _VendorDeliveryService_GetAllVendors_Handler,
		},
		{
			MethodName: "GetVendorsByIds",
			Handler:    _VendorDeliveryService_GetVendorsByIds_Handler,
		},
		{
			MethodName: "GetDeliveryEstimationTimeByOrder",
			Handler:    _VendorDeliveryService_GetDeliveryEstimationTimeByOrder_Handler,
		},
		{
			MethodName: "GetDeliveryEstimationTimeByBasket",
			Handler:    _VendorDeliveryService_GetDeliveryEstimationTimeByBasket_Handler,
		},
		{
			MethodName: "GetOrderPickupVendors",
			Handler:    _VendorDeliveryService_GetOrderPickupVendors_Handler,
		},
		{
			MethodName: "GetVendorByMultipleCoordinates",
			Handler:    _VendorDeliveryService_GetVendorByMultipleCoordinates_Handler,
		},
		{
			MethodName: "GetEtaVendors",
			Handler:    _VendorDeliveryService_GetEtaVendors_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "tmp.DruE8rlWKP",
}
